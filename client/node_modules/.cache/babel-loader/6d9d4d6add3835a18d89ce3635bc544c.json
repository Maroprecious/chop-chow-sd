{"ast":null,"code":"import { __read } from \"tslib\";\nexport var parseBoolean = function parseBoolean(value) {\n  switch (value) {\n    case \"true\":\n      return true;\n\n    case \"false\":\n      return false;\n\n    default:\n      throw new Error(\"Unable to parse boolean value \\\"\".concat(value, \"\\\"\"));\n  }\n};\nexport var expectBoolean = function expectBoolean(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"boolean\") {\n    return value;\n  }\n\n  throw new TypeError(\"Expected boolean, got \".concat(typeof value));\n};\nexport var expectNumber = function expectNumber(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"number\") {\n    return value;\n  }\n\n  throw new TypeError(\"Expected number, got \".concat(typeof value));\n};\nvar MAX_FLOAT = Math.ceil(Math.pow(2, 127) * (2 - Math.pow(2, -23)));\nexport var expectFloat32 = function expectFloat32(value) {\n  var expected = expectNumber(value);\n\n  if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {\n    if (Math.abs(expected) > MAX_FLOAT) {\n      throw new TypeError(\"Expected 32-bit float, got \".concat(value));\n    }\n  }\n\n  return expected;\n};\nexport var expectLong = function expectLong(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (Number.isInteger(value) && !Number.isNaN(value)) {\n    return value;\n  }\n\n  throw new TypeError(\"Expected integer, got \".concat(typeof value));\n};\nexport var expectInt = expectLong;\nexport var expectInt32 = function expectInt32(value) {\n  return expectSizedInt(value, 32);\n};\nexport var expectShort = function expectShort(value) {\n  return expectSizedInt(value, 16);\n};\nexport var expectByte = function expectByte(value) {\n  return expectSizedInt(value, 8);\n};\n\nvar expectSizedInt = function expectSizedInt(value, size) {\n  var expected = expectLong(value);\n\n  if (expected !== undefined && castInt(expected, size) !== expected) {\n    throw new TypeError(\"Expected \".concat(size, \"-bit integer, got \").concat(value));\n  }\n\n  return expected;\n};\n\nvar castInt = function castInt(value, size) {\n  switch (size) {\n    case 32:\n      return Int32Array.of(value)[0];\n\n    case 16:\n      return Int16Array.of(value)[0];\n\n    case 8:\n      return Int8Array.of(value)[0];\n  }\n};\n\nexport var expectNonNull = function expectNonNull(value, location) {\n  if (value === null || value === undefined) {\n    if (location) {\n      throw new TypeError(\"Expected a non-null value for \".concat(location));\n    }\n\n    throw new TypeError(\"Expected a non-null value\");\n  }\n\n  return value;\n};\nexport var expectObject = function expectObject(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"object\" && !Array.isArray(value)) {\n    return value;\n  }\n\n  throw new TypeError(\"Expected object, got \".concat(typeof value));\n};\nexport var expectString = function expectString(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"string\") {\n    return value;\n  }\n\n  throw new TypeError(\"Expected string, got \".concat(typeof value));\n};\nexport var expectUnion = function expectUnion(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  var asObject = expectObject(value);\n  var setKeys = Object.entries(asObject).filter(function (_a) {\n    var _b = __read(_a, 2),\n        _ = _b[0],\n        v = _b[1];\n\n    return v !== null && v !== undefined;\n  }).map(function (_a) {\n    var _b = __read(_a, 2),\n        k = _b[0],\n        _ = _b[1];\n\n    return k;\n  });\n\n  if (setKeys.length === 0) {\n    throw new TypeError(\"Unions must have exactly one non-null member\");\n  }\n\n  if (setKeys.length > 1) {\n    throw new TypeError(\"Unions must have exactly one non-null member. Keys \".concat(setKeys, \" were not null.\"));\n  }\n\n  return asObject;\n};\nexport var strictParseDouble = function strictParseDouble(value) {\n  if (typeof value == \"string\") {\n    return expectNumber(parseNumber(value));\n  }\n\n  return expectNumber(value);\n};\nexport var strictParseFloat = strictParseDouble;\nexport var strictParseFloat32 = function strictParseFloat32(value) {\n  if (typeof value == \"string\") {\n    return expectFloat32(parseNumber(value));\n  }\n\n  return expectFloat32(value);\n};\nvar NUMBER_REGEX = /(-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)|(-?Infinity)|(NaN)/g;\n\nvar parseNumber = function parseNumber(value) {\n  var matches = value.match(NUMBER_REGEX);\n\n  if (matches === null || matches[0].length !== value.length) {\n    throw new TypeError(\"Expected real number, got implicit NaN\");\n  }\n\n  return parseFloat(value);\n};\n\nexport var limitedParseDouble = function limitedParseDouble(value) {\n  if (typeof value == \"string\") {\n    return parseFloatString(value);\n  }\n\n  return expectNumber(value);\n};\nexport var handleFloat = limitedParseDouble;\nexport var limitedParseFloat = limitedParseDouble;\nexport var limitedParseFloat32 = function limitedParseFloat32(value) {\n  if (typeof value == \"string\") {\n    return parseFloatString(value);\n  }\n\n  return expectFloat32(value);\n};\n\nvar parseFloatString = function parseFloatString(value) {\n  switch (value) {\n    case \"NaN\":\n      return NaN;\n\n    case \"Infinity\":\n      return Infinity;\n\n    case \"-Infinity\":\n      return -Infinity;\n\n    default:\n      throw new Error(\"Unable to parse float value: \".concat(value));\n  }\n};\n\nexport var strictParseLong = function strictParseLong(value) {\n  if (typeof value === \"string\") {\n    return expectLong(parseNumber(value));\n  }\n\n  return expectLong(value);\n};\nexport var strictParseInt = strictParseLong;\nexport var strictParseInt32 = function strictParseInt32(value) {\n  if (typeof value === \"string\") {\n    return expectInt32(parseNumber(value));\n  }\n\n  return expectInt32(value);\n};\nexport var strictParseShort = function strictParseShort(value) {\n  if (typeof value === \"string\") {\n    return expectShort(parseNumber(value));\n  }\n\n  return expectShort(value);\n};\nexport var strictParseByte = function strictParseByte(value) {\n  if (typeof value === \"string\") {\n    return expectByte(parseNumber(value));\n  }\n\n  return expectByte(value);\n};","map":{"version":3,"sources":["/home/chuka/joe/ChopChowSD/node_modules/@aws-sdk/smithy-client/dist-es/parse-utils.js"],"names":["__read","parseBoolean","value","Error","concat","expectBoolean","undefined","TypeError","expectNumber","MAX_FLOAT","Math","ceil","pow","expectFloat32","expected","Number","isNaN","Infinity","abs","expectLong","isInteger","expectInt","expectInt32","expectSizedInt","expectShort","expectByte","size","castInt","Int32Array","of","Int16Array","Int8Array","expectNonNull","location","expectObject","Array","isArray","expectString","expectUnion","asObject","setKeys","Object","entries","filter","_a","_b","_","v","map","k","length","strictParseDouble","parseNumber","strictParseFloat","strictParseFloat32","NUMBER_REGEX","matches","match","parseFloat","limitedParseDouble","parseFloatString","handleFloat","limitedParseFloat","limitedParseFloat32","NaN","strictParseLong","strictParseInt","strictParseInt32","strictParseShort","strictParseByte"],"mappings":"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","sourcesContent":["import { __read } from \"tslib\";\nexport var parseBoolean = function (value) {\n    switch (value) {\n        case \"true\":\n            return true;\n        case \"false\":\n            return false;\n        default:\n            throw new Error(\"Unable to parse boolean value \\\"\".concat(value, \"\\\"\"));\n    }\n};\nexport var expectBoolean = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    throw new TypeError(\"Expected boolean, got \".concat(typeof value));\n};\nexport var expectNumber = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"number\") {\n        return value;\n    }\n    throw new TypeError(\"Expected number, got \".concat(typeof value));\n};\nvar MAX_FLOAT = Math.ceil(Math.pow(2, 127) * (2 - Math.pow(2, -23)));\nexport var expectFloat32 = function (value) {\n    var expected = expectNumber(value);\n    if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {\n        if (Math.abs(expected) > MAX_FLOAT) {\n            throw new TypeError(\"Expected 32-bit float, got \".concat(value));\n        }\n    }\n    return expected;\n};\nexport var expectLong = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (Number.isInteger(value) && !Number.isNaN(value)) {\n        return value;\n    }\n    throw new TypeError(\"Expected integer, got \".concat(typeof value));\n};\nexport var expectInt = expectLong;\nexport var expectInt32 = function (value) { return expectSizedInt(value, 32); };\nexport var expectShort = function (value) { return expectSizedInt(value, 16); };\nexport var expectByte = function (value) { return expectSizedInt(value, 8); };\nvar expectSizedInt = function (value, size) {\n    var expected = expectLong(value);\n    if (expected !== undefined && castInt(expected, size) !== expected) {\n        throw new TypeError(\"Expected \".concat(size, \"-bit integer, got \").concat(value));\n    }\n    return expected;\n};\nvar castInt = function (value, size) {\n    switch (size) {\n        case 32:\n            return Int32Array.of(value)[0];\n        case 16:\n            return Int16Array.of(value)[0];\n        case 8:\n            return Int8Array.of(value)[0];\n    }\n};\nexport var expectNonNull = function (value, location) {\n    if (value === null || value === undefined) {\n        if (location) {\n            throw new TypeError(\"Expected a non-null value for \".concat(location));\n        }\n        throw new TypeError(\"Expected a non-null value\");\n    }\n    return value;\n};\nexport var expectObject = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"object\" && !Array.isArray(value)) {\n        return value;\n    }\n    throw new TypeError(\"Expected object, got \".concat(typeof value));\n};\nexport var expectString = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"string\") {\n        return value;\n    }\n    throw new TypeError(\"Expected string, got \".concat(typeof value));\n};\nexport var expectUnion = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    var asObject = expectObject(value);\n    var setKeys = Object.entries(asObject)\n        .filter(function (_a) {\n        var _b = __read(_a, 2), _ = _b[0], v = _b[1];\n        return v !== null && v !== undefined;\n    })\n        .map(function (_a) {\n        var _b = __read(_a, 2), k = _b[0], _ = _b[1];\n        return k;\n    });\n    if (setKeys.length === 0) {\n        throw new TypeError(\"Unions must have exactly one non-null member\");\n    }\n    if (setKeys.length > 1) {\n        throw new TypeError(\"Unions must have exactly one non-null member. Keys \".concat(setKeys, \" were not null.\"));\n    }\n    return asObject;\n};\nexport var strictParseDouble = function (value) {\n    if (typeof value == \"string\") {\n        return expectNumber(parseNumber(value));\n    }\n    return expectNumber(value);\n};\nexport var strictParseFloat = strictParseDouble;\nexport var strictParseFloat32 = function (value) {\n    if (typeof value == \"string\") {\n        return expectFloat32(parseNumber(value));\n    }\n    return expectFloat32(value);\n};\nvar NUMBER_REGEX = /(-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)|(-?Infinity)|(NaN)/g;\nvar parseNumber = function (value) {\n    var matches = value.match(NUMBER_REGEX);\n    if (matches === null || matches[0].length !== value.length) {\n        throw new TypeError(\"Expected real number, got implicit NaN\");\n    }\n    return parseFloat(value);\n};\nexport var limitedParseDouble = function (value) {\n    if (typeof value == \"string\") {\n        return parseFloatString(value);\n    }\n    return expectNumber(value);\n};\nexport var handleFloat = limitedParseDouble;\nexport var limitedParseFloat = limitedParseDouble;\nexport var limitedParseFloat32 = function (value) {\n    if (typeof value == \"string\") {\n        return parseFloatString(value);\n    }\n    return expectFloat32(value);\n};\nvar parseFloatString = function (value) {\n    switch (value) {\n        case \"NaN\":\n            return NaN;\n        case \"Infinity\":\n            return Infinity;\n        case \"-Infinity\":\n            return -Infinity;\n        default:\n            throw new Error(\"Unable to parse float value: \".concat(value));\n    }\n};\nexport var strictParseLong = function (value) {\n    if (typeof value === \"string\") {\n        return expectLong(parseNumber(value));\n    }\n    return expectLong(value);\n};\nexport var strictParseInt = strictParseLong;\nexport var strictParseInt32 = function (value) {\n    if (typeof value === \"string\") {\n        return expectInt32(parseNumber(value));\n    }\n    return expectInt32(value);\n};\nexport var strictParseShort = function (value) {\n    if (typeof value === \"string\") {\n        return expectShort(parseNumber(value));\n    }\n    return expectShort(value);\n};\nexport var strictParseByte = function (value) {\n    if (typeof value === \"string\") {\n        return expectByte(parseNumber(value));\n    }\n    return expectByte(value);\n};\n"]},"metadata":{},"sourceType":"module"}