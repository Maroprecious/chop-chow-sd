{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nexport var getAwsChunkedEncodingStream = function getAwsChunkedEncodingStream(readableStream, options) {\n  var base64Encoder = options.base64Encoder,\n      bodyLengthChecker = options.bodyLengthChecker,\n      checksumAlgorithmFn = options.checksumAlgorithmFn,\n      checksumLocationName = options.checksumLocationName,\n      streamHasher = options.streamHasher;\n  var checksumRequired = base64Encoder !== undefined && bodyLengthChecker !== undefined && checksumAlgorithmFn !== undefined && checksumLocationName !== undefined && streamHasher !== undefined;\n  var digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : undefined;\n  var reader = readableStream.getReader();\n  return new ReadableStream({\n    pull: function pull(controller) {\n      return __awaiter(this, void 0, void 0, function () {\n        var _a, value, done, checksum, _b;\n\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              return [4, reader.read()];\n\n            case 1:\n              _a = _c.sent(), value = _a.value, done = _a.done;\n              if (!done) return [3, 4];\n              controller.enqueue(\"0\\r\\n\");\n              if (!checksumRequired) return [3, 3];\n              _b = base64Encoder;\n              return [4, digest];\n\n            case 2:\n              checksum = _b.apply(void 0, [_c.sent()]);\n              controller.enqueue(\"\".concat(checksumLocationName, \":\").concat(checksum, \"\\r\\n\"));\n              controller.enqueue(\"\\r\\n\");\n              _c.label = 3;\n\n            case 3:\n              controller.close();\n              return [3, 5];\n\n            case 4:\n              controller.enqueue(\"\".concat((bodyLengthChecker(value) || 0).toString(16), \"\\r\\n\").concat(value, \"\\r\\n\"));\n              _c.label = 5;\n\n            case 5:\n              return [2];\n          }\n        });\n      });\n    }\n  });\n};","map":{"version":3,"sources":["/home/chuka/joe/ChopChowSD/node_modules/@aws-sdk/util-stream-browser/dist-es/getAwsChunkedEncodingStream.js"],"names":["__awaiter","__generator","getAwsChunkedEncodingStream","readableStream","options","base64Encoder","bodyLengthChecker","checksumAlgorithmFn","checksumLocationName","streamHasher","checksumRequired","undefined","digest","reader","getReader","ReadableStream","pull","controller","_a","value","done","checksum","_b","_c","label","read","sent","enqueue","apply","concat","close","toString"],"mappings":"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","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nexport var getAwsChunkedEncodingStream = function (readableStream, options) {\n    var base64Encoder = options.base64Encoder, bodyLengthChecker = options.bodyLengthChecker, checksumAlgorithmFn = options.checksumAlgorithmFn, checksumLocationName = options.checksumLocationName, streamHasher = options.streamHasher;\n    var checksumRequired = base64Encoder !== undefined &&\n        bodyLengthChecker !== undefined &&\n        checksumAlgorithmFn !== undefined &&\n        checksumLocationName !== undefined &&\n        streamHasher !== undefined;\n    var digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : undefined;\n    var reader = readableStream.getReader();\n    return new ReadableStream({\n        pull: function (controller) {\n            return __awaiter(this, void 0, void 0, function () {\n                var _a, value, done, checksum, _b;\n                return __generator(this, function (_c) {\n                    switch (_c.label) {\n                        case 0: return [4, reader.read()];\n                        case 1:\n                            _a = _c.sent(), value = _a.value, done = _a.done;\n                            if (!done) return [3, 4];\n                            controller.enqueue(\"0\\r\\n\");\n                            if (!checksumRequired) return [3, 3];\n                            _b = base64Encoder;\n                            return [4, digest];\n                        case 2:\n                            checksum = _b.apply(void 0, [_c.sent()]);\n                            controller.enqueue(\"\".concat(checksumLocationName, \":\").concat(checksum, \"\\r\\n\"));\n                            controller.enqueue(\"\\r\\n\");\n                            _c.label = 3;\n                        case 3:\n                            controller.close();\n                            return [3, 5];\n                        case 4:\n                            controller.enqueue(\"\".concat((bodyLengthChecker(value) || 0).toString(16), \"\\r\\n\").concat(value, \"\\r\\n\"));\n                            _c.label = 5;\n                        case 5: return [2];\n                    }\n                });\n            });\n        },\n    });\n};\n"]},"metadata":{},"sourceType":"module"}