{"ast":null,"code":"var _jsxFileName = \"/home/chuka/joe/ChopChowSD/client/src/components/SuggestMeal.js\";\nimport React, { Component } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport ChipInput from \"material-ui-chip-input\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\"; // createFilterOptions,\n// height of the TextField\n\nclass SuggestMeal extends Component {\n  constructor(props) {\n    super(props);\n    this.products = [];\n    this.categories = [];\n    this.measurements = [\"mL\", \"oz\", \"L\", \"cup(s)\", \"Tbsp\", \"tsp\", \"pt\", \"lb\", \"g\", \"kg\", \"lb\"];\n\n    this.onTextFieldChange = e => {\n      /*\n            Because we named the inputs to match their\n            corresponding values in state, it's\n            super easy to update the state\n          */\n      console.log(\"Comes in on change\"); // console.log(\"Target name: \" + [e.target]);\n\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n    };\n\n    this.sendSuggestedMealToDB = e => {\n      // e.preventDefault();\n      console.log(\"Comes in suggest meal func\"); // get our form data out of state\n\n      const _this$state = this.state,\n            mealLabel = _this$state.mealLabel,\n            intro = _this$state.intro,\n            servings = _this$state.servings,\n            ingredientStrings = _this$state.ingredientStrings,\n            formatted_ingredient = _this$state.formatted_ingredient,\n            instructionsChip = _this$state.instructionsChip,\n            imgSrc = _this$state.imgSrc,\n            readTime = _this$state.readTime,\n            cookTime = _this$state.cookTime,\n            categoryChips = _this$state.categoryChips;\n\n      if (mealLabel === \"\") {\n        console.log(\"meal label blank\");\n        return;\n      }\n\n      console.log(\"ingredient chips are:\");\n      console.log(ingredientStrings);\n\n      if (ingredientStrings.length === 0) {\n        window.alert(\"Suggested meal requires adding at least one ingredient to submit\");\n        return;\n      }\n\n      var url = \"/api/addMealSuggestion/\";\n      console.log(\"gets to call fetch\");\n      fetch(url, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          mealLabel,\n          intro,\n          servings,\n          formatted_ingredient,\n          instructionsChip,\n          ingredientStrings,\n          imgSrc,\n          readTime,\n          cookTime,\n          categoryChips\n        })\n      }).then(response => {\n        if (response.status >= 200 && response.status < 300) {\n          console.log(response);\n          console.log(\"Display Meal submitted successfully\"); // return response;\n          // window.location.reload();\n        } else {\n          console.log(\"Somthing happened wrong\");\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.state = {\n      mealLabel: \"\",\n      intro: \"\",\n      servings: 0,\n      currentIngredient: \"Butter scotch\",\n      currentIngredientMeasurement: null,\n      currentIngredientQuantity: 0,\n      ingredientStrings: [],\n      formatted_ingredient: [],\n      instructionsChip: [],\n      imgSrc: \"\",\n      readTime: \"0 mins read\",\n      cookTime: \"10 mins cook time\",\n      categoryChips: [\"snacks\", \"abc\", \"123\"],\n      productsPopulated: false\n    };\n    this.handleIngredientDropdownChange = this.handleIngredientDropdownChange.bind(this);\n    this.handleIngredientMeasurement = this.handleIngredientMeasurement.bind(this);\n    this.handleIngredientQuantity = this.handleIngredientQuantity.bind(this);\n    this.addIngredientToMeal = this.addIngredientToMeal.bind(this);\n  }\n\n  componentDidMount() {\n    var url = \"./api/get-all-products\";\n    fetch(url, {\n      method: \"GET\" // credentials: 'include',\n      // headers: {\n      //   'Content-Type': 'application/json',\n      // }\n\n    }).then(res => res.text()).then(body => {\n      // console.log(\"should print body\");\n      // console.log(body);\n      var productsList = JSON.parse(body);\n\n      if (productsList && productsList.data.length !== 0) {\n        console.log(\"returns GET ALL PRODUCTS \");\n        console.log(productsList.data.length);\n\n        for (var i = 0; i < productsList.data.length; i++) {\n          this.products.push(productsList.data[i].product_name);\n        }\n\n        console.log(\"PRINTING ALL PRODUCTS LIST\");\n        console.log(this.products);\n        this.setState({\n          productsPopulated: true\n        });\n      } else {\n        console.log(\"get all products function does not return\");\n      }\n    }).catch(err => {\n      console.log(err);\n    }); //get category meals\n\n    url = \"./api/get-all-categories\";\n    fetch(url, {\n      method: \"GET\" // credentials: 'include',\n      // headers: {\n      //   'Content-Type': 'application/json',\n      // }\n\n    }).then(res => res.text()).then(body => {\n      // console.log(\"should print body\");\n      console.log(body);\n      var categoryList = JSON.parse(body);\n\n      if (categoryList && categoryList.data.length !== 0) {\n        console.log(\"returns GET of ALL Categories \");\n        console.log(categoryList.data.length);\n\n        for (var i = 0; i < categoryList.data.length; i++) {\n          this.categories.push(categoryList.data[i]);\n        }\n\n        console.log(\"PRINTING UPDATED CATEGORIES LIST\");\n        console.log(this.categories);\n      } else {\n        console.log(\"get all products function does not return\");\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  handleAddIngredientChip(chip) {\n    this.setState({\n      ingredientStrings: [...this.state.ingredientStrings, chip]\n    }); // check if ingredients already exists , if exists use product,\n    // else add product to suggested products\n  }\n\n  handleAddCategoryChip(chip) {\n    this.setState({\n      categoryChips: [...this.state.categoryChips, chip]\n    }); //\n    // check if category already exists , if exists use it,\n    // else add category to new category\n  }\n\n  handleAddInstructionStep(chip) {\n    // this.setState({\n    //     instructionsChip: [...this.state.instructionsChip, instructionStep]\n    // })\n    this.setState({\n      instructionsChip: [...this.state.instructionsChip, chip]\n    });\n  }\n\n  handleDeleteIngredientChip(chip) {\n    console.log(\"removing chop input\");\n    var array = [...this.state.ingredientStrings]; // make a separate copy of the array\n\n    var index = array.indexOf(chip);\n\n    if (index !== -1) {\n      array.splice(index, 1);\n      this.setState({\n        ingredientStrings: array\n      });\n    }\n  }\n\n  handleDeleteCategoryChip(chip) {\n    console.log(\"removing chop input\");\n    var array = [...this.state.categoryChips]; // make a separate copy of the array\n\n    var index = array.indexOf(chip);\n\n    if (index !== -1) {\n      array.splice(index, 1);\n      this.setState({\n        categoryChips: array\n      });\n    }\n  }\n\n  handleDeleteInstructionsStep(chip) {\n    console.log(\"removing chop input\");\n    var array = [...this.state.instructionsChip]; // make a separate copy of the array\n\n    var index = array.indexOf(chip);\n\n    if (index !== -1) {\n      array.splice(index, 1);\n      this.setState({\n        instructionsChip: array\n      });\n    }\n  }\n\n  handleIngredientQuantity(event) {\n    console.log(event.target.value);\n    this.setState({\n      currentIngredientQuantity: event.target.value\n    });\n  }\n\n  handleIngredientDropdownChange(event) {\n    console.log(event.target);\n\n    if (event.target.value) {\n      this.setState({\n        currentIngredient: event.target.value\n      });\n    } else {\n      this.setState({\n        currentIngredient: event.target.innerHTML\n      });\n    }\n  }\n\n  handleIngredientMeasurement(event) {\n    if (event.target.value) {\n      this.setState({\n        currentIngredientMeasurement: event.target.value\n      });\n    } else {\n      this.setState({\n        currentIngredientMeasurement: event.target.innerHTML\n      });\n    }\n  }\n\n  addIngredientToMeal(event) {\n    event.preventDefault();\n    console.log(this.state.currentIngredientMeasurement);\n    var properIngredientStringSyntax;\n\n    if (document.getElementById(\"currentIngredient\").value === \"\") {\n      window.alert(\"Enter an ingredient to add to meal\");\n      return;\n    }\n\n    if (this.state.currentIngredientQuantity === 0) {\n      properIngredientStringSyntax = document.getElementById(\"currentIngredient\").value;\n    } else if (document.getElementById(\"currentIngredientMeasurement\").value === null) {\n      properIngredientStringSyntax = \"\" + this.state.currentIngredientQuantity + \" \" + document.getElementById(\"currentIngredient\").value;\n    } else {\n      properIngredientStringSyntax = \"\" + this.state.currentIngredientQuantity + \" \" + document.getElementById(\"currentIngredientMeasurement\").value + \" of \" + document.getElementById(\"currentIngredient\").value;\n    }\n\n    var currIngredientObject = {\n      product: this.state.currentIngredient,\n      quantity: this.state.currentIngredientQuantity,\n      measurement: this.state.currentIngredientMeasurement\n    };\n    console.log(properIngredientStringSyntax);\n    this.handleAddIngredientChip(properIngredientStringSyntax);\n    this.setState({\n      formatted_ingredient: [...this.state.formatted_ingredient, currIngredientObject]\n    }); // this.state.currentIngredientMeasurement +\n  } // use function format to allow for use of this.state\n  // within a component function\n\n\n  render() {\n    var instructionSteps =\n    /*#__PURE__*/\n    React.createElement(\"ol\", {\n      className: \"mdc-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 7\n      }\n    }, this.state.instructionsChip.map(chip =>\n    /*#__PURE__*/\n    React.createElement(\"li\", {\n      className: \"mdc-list-item\",\n      tabIndex: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 11\n      }\n    },\n    /*#__PURE__*/\n    React.createElement(\"span\", {\n      className: \"mdc-list-item__text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 13\n      }\n    }, chip))));\n    return (\n      /*#__PURE__*/\n      React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 7\n        }\n      },\n      /*#__PURE__*/\n      React.createElement(\"div\", {\n        id: \"title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 9\n        }\n      },\n      /*#__PURE__*/\n      React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }\n      }, \"Suggestions\")),\n      /*#__PURE__*/\n      React.createElement(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 9\n        }\n      },\n      /*#__PURE__*/\n      React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(\"form\", {\n        autoComplete: \"off\",\n        action: \"#\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }\n      },\n      /*#__PURE__*/\n      React.createElement(TextField, {\n        id: \"mealLabel\",\n        onChange: this.onTextFieldChange,\n        label: \"Meal Name\",\n        required: true,\n        variant: \"filled\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 13\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 13\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(TextField, {\n        multiline: true,\n        id: \"intro\",\n        onChange: this.onTextFieldChange,\n        label: \"Intro\",\n        variant: \"filled\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 13\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 13\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(TextField, {\n        id: \"servings\",\n        type: \"number\",\n        onChange: this.onTextFieldChange,\n        label: \"Servings\",\n        variant: \"filled\",\n        placeholder: \"1 person, 2, 4 or 10 people\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 13\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(ChipInput, {\n        label: \"IngredientsList\",\n        value: this.state.ingredientStrings,\n        onAdd: chip => this.handleAddIngredientChip(chip),\n        placeholder: \"e.g 1 Onion, 2 Cups of Water, etc\",\n        onDelete: (chip, index) => this.handleDeleteIngredientChip(chip, index),\n        variant: \"filled\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 13\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 13\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 13\n        }\n      },\n      /*#__PURE__*/\n      React.createElement(Autocomplete, {\n        id: \"currentIngredient\",\n        options: this.products.map(option => option),\n        onChange: this.handleIngredientDropdownChange // style={{ width: 200 }}\n        ,\n        freeSolo: true,\n        renderInput: params =>\n        /*#__PURE__*/\n        React.createElement(TextField, Object.assign({}, params, {\n          label: \"Ingredient..\",\n          variant: \"filled\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 19\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 15\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(TextField, {\n        id: \"currentIngredientQuantity\",\n        type: \"number\",\n        onChange: this.onTextFieldChange,\n        label: \"Quantity\",\n        variant: \"filled\",\n        placeholder: \"1..\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 15\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(Autocomplete, {\n        id: \"currentIngredientMeasurement\",\n        options: this.measurements.map(option => option),\n        onChange: this.handleIngredientMeasurement,\n        freeSolo: true,\n        renderInput: params =>\n        /*#__PURE__*/\n        React.createElement(TextField, Object.assign({}, params, {\n          label: \"Measurement..\",\n          variant: \"outlined\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 19\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 15\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(\"button\", {\n        onClick: this.addIngredientToMeal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 15\n        }\n      }, \" \", \"Add Ingredient +\", \" \")), instructionSteps,\n      /*#__PURE__*/\n      React.createElement(ChipInput, {\n        label: \"Instructions\",\n        value: this.state.instructionsChip,\n        onAdd: chip => this.handleAddInstructionStep(chip),\n        onDelete: (chip, index) => this.handleDeleteInstructionsStep(chip, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 13\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 13\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(TextField, {\n        id: \"imgsrc\",\n        type: \"file\",\n        onChange: this.onTextFieldChange,\n        label: \"Upload meal image\",\n        variant: \"filled\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 13\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 13\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(TextField, {\n        id: \"readTime\",\n        type: \"number\",\n        onChange: this.onTextFieldChange,\n        label: \"ReadTime (mins)\",\n        variant: \"filled\",\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 13\n        }\n      }), \" \",\n      /*#__PURE__*/\n      React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 13\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(TextField, {\n        id: \"cookTime\",\n        type: \"number\",\n        onChange: this.onTextFieldChange,\n        label: \"CookTime (mins)\",\n        variant: \"filled\",\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 13\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 13\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(Autocomplete, {\n        multiple: true,\n        id: \"tags-filled\",\n        options: this.categories.map(option => option),\n        defaultValue: [this.categories[0]],\n        freeSolo: true,\n        renderTags: (value, getTagProps) => value.map((option, index) =>\n        /*#__PURE__*/\n        React.createElement(Chip, Object.assign({\n          variant: \"outlined\",\n          label: option\n        }, getTagProps({\n          index\n        }), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 19\n          }\n        }))),\n        renderInput: params =>\n        /*#__PURE__*/\n        React.createElement(TextField, Object.assign({}, params, {\n          variant: \"filled\",\n          label: \"Categories\",\n          placeholder: \"Suggest categories for this meal..\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 17\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 13\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 13\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(\"button\", {\n        onClick: this.sendSuggestedMealToDB,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 13\n        }\n      }, \" Suggest Meal \"))))\n    );\n  }\n\n}\n\nexport default SuggestMeal;","map":{"version":3,"sources":["/home/chuka/joe/ChopChowSD/client/src/components/SuggestMeal.js"],"names":["React","Component","TextField","ChipInput","Chip","Autocomplete","SuggestMeal","constructor","props","products","categories","measurements","onTextFieldChange","e","console","log","setState","target","id","value","sendSuggestedMealToDB","state","mealLabel","intro","servings","ingredientStrings","formatted_ingredient","instructionsChip","imgSrc","readTime","cookTime","categoryChips","length","window","alert","url","fetch","method","headers","Accept","body","JSON","stringify","then","response","status","catch","err","currentIngredient","currentIngredientMeasurement","currentIngredientQuantity","productsPopulated","handleIngredientDropdownChange","bind","handleIngredientMeasurement","handleIngredientQuantity","addIngredientToMeal","componentDidMount","res","text","productsList","parse","data","i","push","product_name","categoryList","handleAddIngredientChip","chip","handleAddCategoryChip","handleAddInstructionStep","handleDeleteIngredientChip","array","index","indexOf","splice","handleDeleteCategoryChip","handleDeleteInstructionsStep","event","innerHTML","preventDefault","properIngredientStringSyntax","document","getElementById","currIngredientObject","product","quantity","measurement","render","instructionSteps","map","textAlign","option","params","getTagProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport ChipInput from \"material-ui-chip-input\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\"; // createFilterOptions,\n\n// height of the TextField\n\nclass SuggestMeal extends Component {\n  products = [];\n  categories = [];\n  measurements = [\n    \"mL\",\n    \"oz\",\n    \"L\",\n    \"cup(s)\",\n    \"Tbsp\",\n    \"tsp\",\n    \"pt\",\n    \"lb\",\n    \"g\",\n    \"kg\",\n    \"lb\",\n  ];\n  constructor(props) {\n    super(props);\n    this.state = {\n      mealLabel: \"\",\n      intro: \"\",\n      servings: 0,\n      currentIngredient: \"Butter scotch\",\n      currentIngredientMeasurement: null,\n      currentIngredientQuantity: 0,\n      ingredientStrings: [],\n      formatted_ingredient: [],\n      instructionsChip: [],\n      imgSrc: \"\",\n      readTime: \"0 mins read\",\n      cookTime: \"10 mins cook time\",\n      categoryChips: [\"snacks\", \"abc\", \"123\"],\n      productsPopulated: false,\n    };\n    this.handleIngredientDropdownChange = this.handleIngredientDropdownChange.bind(\n      this\n    );\n    this.handleIngredientMeasurement = this.handleIngredientMeasurement.bind(\n      this\n    );\n    this.handleIngredientQuantity = this.handleIngredientQuantity.bind(this);\n    this.addIngredientToMeal = this.addIngredientToMeal.bind(this);\n  }\n\n  componentDidMount() {\n    var url = \"./api/get-all-products\";\n\n    fetch(url, {\n      method: \"GET\",\n      // credentials: 'include',\n      // headers: {\n      //   'Content-Type': 'application/json',\n      // }\n    })\n      .then((res) => res.text())\n      .then((body) => {\n        // console.log(\"should print body\");\n        // console.log(body);\n        var productsList = JSON.parse(body);\n        if (productsList && productsList.data.length !== 0) {\n          console.log(\"returns GET ALL PRODUCTS \");\n          console.log(productsList.data.length);\n          for (var i = 0; i < productsList.data.length; i++) {\n            this.products.push(productsList.data[i].product_name);\n          }\n          console.log(\"PRINTING ALL PRODUCTS LIST\");\n          console.log(this.products);\n          this.setState({ productsPopulated: true });\n        } else {\n          console.log(\"get all products function does not return\");\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n\n    //get category meals\n    url = \"./api/get-all-categories\";\n\n    fetch(url, {\n      method: \"GET\",\n      // credentials: 'include',\n      // headers: {\n      //   'Content-Type': 'application/json',\n      // }\n    })\n      .then((res) => res.text())\n      .then((body) => {\n        // console.log(\"should print body\");\n        console.log(body);\n        var categoryList = JSON.parse(body);\n        if (categoryList && categoryList.data.length !== 0) {\n          console.log(\"returns GET of ALL Categories \");\n          console.log(categoryList.data.length);\n          for (var i = 0; i < categoryList.data.length; i++) {\n            this.categories.push(categoryList.data[i]);\n          }\n          console.log(\"PRINTING UPDATED CATEGORIES LIST\");\n          console.log(this.categories);\n        } else {\n          console.log(\"get all products function does not return\");\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  onTextFieldChange = (e) => {\n    /*\n          Because we named the inputs to match their\n          corresponding values in state, it's\n          super easy to update the state\n        */\n    console.log(\"Comes in on change\");\n    // console.log(\"Target name: \" + [e.target]);\n    this.setState({ [e.target.id]: e.target.value });\n  };\n\n  handleAddIngredientChip(chip) {\n    this.setState({\n      ingredientStrings: [...this.state.ingredientStrings, chip],\n    });\n    // check if ingredients already exists , if exists use product,\n    // else add product to suggested products\n  }\n\n  handleAddCategoryChip(chip) {\n    this.setState({ categoryChips: [...this.state.categoryChips, chip] }); //\n    // check if category already exists , if exists use it,\n    // else add category to new category\n  }\n\n  handleAddInstructionStep(chip) {\n    // this.setState({\n    //     instructionsChip: [...this.state.instructionsChip, instructionStep]\n    // })\n\n    this.setState({\n      instructionsChip: [...this.state.instructionsChip, chip],\n    });\n  }\n\n  handleDeleteIngredientChip(chip) {\n    console.log(\"removing chop input\");\n    var array = [...this.state.ingredientStrings]; // make a separate copy of the array\n    var index = array.indexOf(chip);\n    if (index !== -1) {\n      array.splice(index, 1);\n      this.setState({ ingredientStrings: array });\n    }\n  }\n\n  handleDeleteCategoryChip(chip) {\n    console.log(\"removing chop input\");\n    var array = [...this.state.categoryChips]; // make a separate copy of the array\n    var index = array.indexOf(chip);\n    if (index !== -1) {\n      array.splice(index, 1);\n      this.setState({ categoryChips: array });\n    }\n  }\n\n  handleDeleteInstructionsStep(chip) {\n    console.log(\"removing chop input\");\n    var array = [...this.state.instructionsChip]; // make a separate copy of the array\n    var index = array.indexOf(chip);\n    if (index !== -1) {\n      array.splice(index, 1);\n      this.setState({ instructionsChip: array });\n    }\n  }\n  handleIngredientQuantity(event) {\n    console.log(event.target.value);\n    this.setState({ currentIngredientQuantity: event.target.value });\n  }\n  handleIngredientDropdownChange(event) {\n    console.log(event.target);\n    if (event.target.value) {\n      this.setState({ currentIngredient: event.target.value });\n    } else {\n      this.setState({ currentIngredient: event.target.innerHTML });\n    }\n  }\n  handleIngredientMeasurement(event) {\n    if (event.target.value) {\n      this.setState({ currentIngredientMeasurement: event.target.value });\n    } else {\n      this.setState({ currentIngredientMeasurement: event.target.innerHTML });\n    }\n  }\n\n  addIngredientToMeal(event) {\n    event.preventDefault();\n    console.log(this.state.currentIngredientMeasurement);\n    var properIngredientStringSyntax;\n\n    if (document.getElementById(\"currentIngredient\").value === \"\") {\n      window.alert(\"Enter an ingredient to add to meal\");\n      return;\n    }\n\n    if (this.state.currentIngredientQuantity === 0) {\n      properIngredientStringSyntax = document.getElementById(\n        \"currentIngredient\"\n      ).value;\n    } else if (\n      document.getElementById(\"currentIngredientMeasurement\").value === null\n    ) {\n      properIngredientStringSyntax =\n        \"\" +\n        this.state.currentIngredientQuantity +\n        \" \" +\n        document.getElementById(\"currentIngredient\").value;\n    } else {\n      properIngredientStringSyntax =\n        \"\" +\n        this.state.currentIngredientQuantity +\n        \" \" +\n        document.getElementById(\"currentIngredientMeasurement\").value +\n        \" of \" +\n        document.getElementById(\"currentIngredient\").value;\n    }\n    var currIngredientObject = {\n      product: this.state.currentIngredient,\n      quantity: this.state.currentIngredientQuantity,\n      measurement: this.state.currentIngredientMeasurement,\n    };\n    console.log(properIngredientStringSyntax);\n    this.handleAddIngredientChip(properIngredientStringSyntax);\n    this.setState({\n      formatted_ingredient: [\n        ...this.state.formatted_ingredient,\n        currIngredientObject,\n      ],\n    });\n    // this.state.currentIngredientMeasurement +\n  }\n  // use function format to allow for use of this.state\n  // within a component function\n  sendSuggestedMealToDB = (e) => {\n    // e.preventDefault();\n    console.log(\"Comes in suggest meal func\");\n    // get our form data out of state\n    const {\n      mealLabel,\n      intro,\n      servings,\n      ingredientStrings,\n      formatted_ingredient,\n      instructionsChip,\n      imgSrc,\n      readTime,\n      cookTime,\n      categoryChips,\n    } = this.state;\n\n    if (mealLabel === \"\") {\n      console.log(\"meal label blank\");\n      return;\n    }\n    console.log(\"ingredient chips are:\");\n    console.log(ingredientStrings);\n    if (ingredientStrings.length === 0) {\n      window.alert(\n        \"Suggested meal requires adding at least one ingredient to submit\"\n      );\n      return;\n    }\n\n    var url = \"/api/addMealSuggestion/\";\n    console.log(\"gets to call fetch\");\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        mealLabel,\n        intro,\n        servings,\n        formatted_ingredient,\n        instructionsChip,\n        ingredientStrings,\n        imgSrc,\n        readTime,\n        cookTime,\n        categoryChips,\n      }),\n    })\n      .then((response) => {\n        if (response.status >= 200 && response.status < 300) {\n          console.log(response);\n          console.log(\"Display Meal submitted successfully\");\n          // return response;\n          // window.location.reload();\n        } else {\n          console.log(\"Somthing happened wrong\");\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  render() {\n    var instructionSteps = (\n      <ol className=\"mdc-list\">\n        {this.state.instructionsChip.map((chip) => (\n          <li className=\"mdc-list-item\" tabIndex=\"0\">\n            <span className=\"mdc-list-item__text\">{chip}</span>\n          </li>\n        ))}\n      </ol>\n    );\n\n    return (\n      <div>\n        <div id=\"title\">\n          <b>Suggestions</b>\n        </div>\n\n        <div style={{ textAlign: \"center\" }}>\n          <br></br>\n          {/* add hash action so that form does not reload on enter or button click */}\n          <form autoComplete=\"off\" action=\"#\">\n            <TextField\n              id=\"mealLabel\"\n              onChange={this.onTextFieldChange}\n              label=\"Meal Name\"\n              required\n              variant=\"filled\"\n            />\n            <br></br>\n            <TextField\n              multiline\n              id=\"intro\"\n              onChange={this.onTextFieldChange}\n              label=\"Intro\"\n              variant=\"filled\"\n            />\n            <br></br>\n            <TextField\n              id=\"servings\"\n              type=\"number\"\n              onChange={this.onTextFieldChange}\n              label=\"Servings\"\n              variant=\"filled\"\n              placeholder=\"1 person, 2, 4 or 10 people\"\n            />\n            <br></br>\n            {/*  Be able to display product images on clock */}\n            <ChipInput\n              label=\"IngredientsList\"\n              value={this.state.ingredientStrings}\n              onAdd={(chip) => this.handleAddIngredientChip(chip)}\n              placeholder=\"e.g 1 Onion, 2 Cups of Water, etc\"\n              onDelete={(chip, index) =>\n                this.handleDeleteIngredientChip(chip, index)\n              }\n              variant=\"filled\"\n            />\n            <br></br>\n            <div>\n              {/* <select onChange={this.handleIngredientDropdownChange}>\n                {productOptions}\n              </select> */}\n\n              <Autocomplete\n                id=\"currentIngredient\"\n                options={this.products.map((option) => option)}\n                onChange={this.handleIngredientDropdownChange}\n                // style={{ width: 200 }}\n                freeSolo\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Ingredient..\"\n                    variant=\"filled\"\n                  />\n                )}\n              />\n\n              <TextField\n                id=\"currentIngredientQuantity\"\n                type=\"number\"\n                onChange={this.onTextFieldChange}\n                label=\"Quantity\"\n                variant=\"filled\"\n                placeholder=\"1..\"\n              />\n\n              <Autocomplete\n                id=\"currentIngredientMeasurement\"\n                options={this.measurements.map((option) => option)}\n                onChange={this.handleIngredientMeasurement}\n                freeSolo\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Measurement..\"\n                    variant=\"outlined\"\n                  />\n                )}\n              />\n              <button onClick={this.addIngredientToMeal}>\n                {\" \"}\n                Add Ingredient +{\" \"}\n              </button>\n\n              {/* <FormControl>\n                                <InputLabel id=\"demo-simple-select-helper-label\">Age</InputLabel>\n                                <Select\n                                    labelId=\"demo-simple-select-helper-label\"\n                                    id=\"demo-simple-select-helper\"\n                                    value={measurement}\n                                    onChange={handleMeasurementChange}\n                                >\n                                    <MenuItem value={measurement}>\n                                        <em>Measurement</em>\n                                    </MenuItem>\n                                    <MenuItem value={1}>mL</MenuItem>\n                                    <MenuItem value={2}>oz</MenuItem>\n                                    <MenuItem value={3}>tbs</MenuItem>\n                                    <MenuItem value={4}>lbs</MenuItem>\n                                </Select>\n                                <FormHelperText>Enter measurement unit for serving</FormHelperText>\n                            </FormControl> */}\n              {/* <input>Measurement</input><input>Product</input> */}\n            </div>\n            {instructionSteps}\n            <ChipInput\n              label=\"Instructions\"\n              value={this.state.instructionsChip}\n              onAdd={(chip) => this.handleAddInstructionStep(chip)}\n              onDelete={(chip, index) =>\n                this.handleDeleteInstructionsStep(chip, index)\n              }\n            />\n            <br></br>\n            {/* <TextField id=\"instructions\" onChange={this.onChange} label=\"Instructions\" variant=\"filled\" /><br></br> */}\n            <TextField\n              id=\"imgsrc\"\n              type=\"file\"\n              onChange={this.onTextFieldChange}\n              label=\"Upload meal image\"\n              variant=\"filled\"\n            />\n            <br></br>\n            {/* <input type=\"file\" name=\"file-input\" multiple /><br></br>  */}\n            {/* {...props} */}\n            <TextField\n              id=\"readTime\"\n              type=\"number\"\n              onChange={this.onTextFieldChange}\n              label=\"ReadTime (mins)\"\n              variant=\"filled\"\n              required\n            />{\" \"}\n            <br></br>\n            <TextField\n              id=\"cookTime\"\n              type=\"number\"\n              onChange={this.onTextFieldChange}\n              label=\"CookTime (mins)\"\n              variant=\"filled\"\n              required\n            />\n            <br></br>\n            <Autocomplete\n              multiple\n              id=\"tags-filled\"\n              options={this.categories.map((option) => option)}\n              defaultValue={[this.categories[0]]}\n              freeSolo\n              renderTags={(value, getTagProps) =>\n                value.map((option, index) => (\n                  <Chip\n                    variant=\"outlined\"\n                    label={option}\n                    {...getTagProps({ index })}\n                  />\n                ))\n              }\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  variant=\"filled\"\n                  label=\"Categories\"\n                  placeholder=\"Suggest categories for this meal..\"\n                />\n              )}\n            />\n            <br></br>\n            <button onClick={this.sendSuggestedMealToDB}> Suggest Meal </button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SuggestMeal;\n"]},"metadata":{},"sourceType":"module"}