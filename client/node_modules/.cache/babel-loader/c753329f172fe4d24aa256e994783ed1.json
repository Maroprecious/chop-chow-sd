{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AwsCrc32c = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar util_1 = require(\"@aws-crypto/util\");\n\nvar index_1 = require(\"./index\");\n\nvar AwsCrc32c =\n/** @class */\nfunction () {\n  function AwsCrc32c() {\n    this.crc32c = new index_1.Crc32c();\n  }\n\n  AwsCrc32c.prototype.update = function (toHash) {\n    if ((0, util_1.isEmptyData)(toHash)) return;\n    this.crc32c.update((0, util_1.convertToBuffer)(toHash));\n  };\n\n  AwsCrc32c.prototype.digest = function () {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {\n      return (0, tslib_1.__generator)(this, function (_a) {\n        return [2\n        /*return*/\n        , (0, util_1.numToUint8)(this.crc32c.digest())];\n      });\n    });\n  };\n\n  return AwsCrc32c;\n}();\n\nexports.AwsCrc32c = AwsCrc32c;","map":{"version":3,"sources":["../src/aws_crc32c.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;AAGA,IAAA,MAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,IAAA,SAAA;AAAA;AAAA,YAAA;AAAA,WAAA,SAAA,GAAA;AACmB,SAAA,MAAA,GAAS,IAAI,OAAA,CAAA,MAAJ,EAAT;AAWlB;;AATC,EAAA,SAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,MAAP,EAAyB;AACvB,QAAI,CAAA,GAAA,MAAA,CAAA,WAAA,EAAY,MAAZ,CAAJ,EAAyB;AAEzB,SAAK,MAAL,CAAY,MAAZ,CAAmB,CAAA,GAAA,MAAA,CAAA,eAAA,EAAgB,MAAhB,CAAnB;AACD,GAJD;;AAMM,EAAA,SAAA,CAAA,SAAA,CAAA,MAAA,GAAN,YAAA;;;AACE,eAAA,CAAA;AAAA;AAAA,UAAO,CAAA,GAAA,MAAA,CAAA,UAAA,EAAW,KAAK,MAAL,CAAY,MAAZ,EAAX,CAAP,CAAA;;;AACD,GAFK;;AAGR,SAAA,SAAA;AAAC,CAZD,EAAA;;AAAa,OAAA,CAAA,SAAA,GAAA,SAAA","sourcesContent":["// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Hash, SourceData } from \"@aws-sdk/types\";\nimport { convertToBuffer, isEmptyData, numToUint8 } from \"@aws-crypto/util\";\nimport { Crc32c } from \"./index\";\n\nexport class AwsCrc32c implements Hash {\n  private readonly crc32c = new Crc32c();\n\n  update(toHash: SourceData) {\n    if (isEmptyData(toHash)) return;\n\n    this.crc32c.update(convertToBuffer(toHash));\n  }\n\n  async digest(): Promise<Uint8Array> {\n    return numToUint8(this.crc32c.digest());\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}