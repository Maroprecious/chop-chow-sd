{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nexport var useRegionalEndpointMiddleware = function useRegionalEndpointMiddleware(config) {\n  return function (next) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var request, _a;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              request = args.request;\n              if (!HttpRequest.isInstance(request) || config.isCustomEndpoint) return [2, next(__assign({}, args))];\n              if (!(request.hostname === \"s3.amazonaws.com\")) return [3, 1];\n              request.hostname = \"s3.us-east-1.amazonaws.com\";\n              return [3, 3];\n\n            case 1:\n              _a = \"aws-global\";\n              return [4, config.region()];\n\n            case 2:\n              if (_a === _b.sent()) {\n                request.hostname = \"s3.amazonaws.com\";\n              }\n\n              _b.label = 3;\n\n            case 3:\n              return [2, next(__assign({}, args))];\n          }\n        });\n      });\n    };\n  };\n};\nexport var useRegionalEndpointMiddlewareOptions = {\n  step: \"build\",\n  tags: [\"USE_REGIONAL_ENDPOINT\", \"S3\"],\n  name: \"useRegionalEndpointMiddleware\",\n  override: true\n};\nexport var getUseRegionalEndpointPlugin = function getUseRegionalEndpointPlugin(config) {\n  return {\n    applyToStack: function applyToStack(clientStack) {\n      clientStack.add(useRegionalEndpointMiddleware(config), useRegionalEndpointMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["/home/chuka/joe/ChopChowSD/node_modules/@aws-sdk/middleware-sdk-s3/dist-es/use-regional-endpoint.js"],"names":["__assign","__awaiter","__generator","HttpRequest","useRegionalEndpointMiddleware","config","next","args","request","_a","_b","label","isInstance","isCustomEndpoint","hostname","region","sent","useRegionalEndpointMiddlewareOptions","step","tags","name","override","getUseRegionalEndpointPlugin","applyToStack","clientStack","add"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAO,IAAIC,6BAA6B,GAAG,SAAhCA,6BAAgC,CAAUC,MAAV,EAAkB;AACzD,SAAO,UAAUC,IAAV,EAAgB;AACnB,WAAO,UAAUC,IAAV,EAAgB;AAAE,aAAON,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;AAC1E,YAAIO,OAAJ,EAAaC,EAAb;;AACA,eAAOP,WAAW,CAAC,IAAD,EAAO,UAAUQ,EAAV,EAAc;AACnC,kBAAQA,EAAE,CAACC,KAAX;AACI,iBAAK,CAAL;AACIH,cAAAA,OAAO,GAAGD,IAAI,CAACC,OAAf;AACA,kBAAI,CAACL,WAAW,CAACS,UAAZ,CAAuBJ,OAAvB,CAAD,IAAoCH,MAAM,CAACQ,gBAA/C,EACI,OAAO,CAAC,CAAD,EAAIP,IAAI,CAACN,QAAQ,CAAC,EAAD,EAAKO,IAAL,CAAT,CAAR,CAAP;AACJ,kBAAI,EAAEC,OAAO,CAACM,QAAR,KAAqB,kBAAvB,CAAJ,EAAgD,OAAO,CAAC,CAAD,EAAI,CAAJ,CAAP;AAChDN,cAAAA,OAAO,CAACM,QAAR,GAAmB,4BAAnB;AACA,qBAAO,CAAC,CAAD,EAAI,CAAJ,CAAP;;AACJ,iBAAK,CAAL;AACIL,cAAAA,EAAE,GAAG,YAAL;AACA,qBAAO,CAAC,CAAD,EAAIJ,MAAM,CAACU,MAAP,EAAJ,CAAP;;AACJ,iBAAK,CAAL;AACI,kBAAIN,EAAE,KAAMC,EAAE,CAACM,IAAH,EAAZ,EAAwB;AACpBR,gBAAAA,OAAO,CAACM,QAAR,GAAmB,kBAAnB;AACH;;AACDJ,cAAAA,EAAE,CAACC,KAAH,GAAW,CAAX;;AACJ,iBAAK,CAAL;AAAQ,qBAAO,CAAC,CAAD,EAAIL,IAAI,CAACN,QAAQ,CAAC,EAAD,EAAKO,IAAL,CAAT,CAAR,CAAP;AAhBZ;AAkBH,SAnBiB,CAAlB;AAoBH,OAtBwC,CAAhB;AAsBpB,KAtBL;AAuBH,GAxBD;AAyBH,CA1BM;AA2BP,OAAO,IAAIU,oCAAoC,GAAG;AAC9CC,EAAAA,IAAI,EAAE,OADwC;AAE9CC,EAAAA,IAAI,EAAE,CAAC,uBAAD,EAA0B,IAA1B,CAFwC;AAG9CC,EAAAA,IAAI,EAAE,+BAHwC;AAI9CC,EAAAA,QAAQ,EAAE;AAJoC,CAA3C;AAMP,OAAO,IAAIC,4BAA4B,GAAG,SAA/BA,4BAA+B,CAAUjB,MAAV,EAAkB;AAAE,SAAQ;AAClEkB,IAAAA,YAAY,EAAE,sBAAUC,WAAV,EAAuB;AACjCA,MAAAA,WAAW,CAACC,GAAZ,CAAgBrB,6BAA6B,CAACC,MAAD,CAA7C,EAAuDY,oCAAvD;AACH;AAHiE,GAAR;AAIzD,CAJE","sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nexport var useRegionalEndpointMiddleware = function (config) {\n    return function (next) {\n        return function (args) { return __awaiter(void 0, void 0, void 0, function () {\n            var request, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        request = args.request;\n                        if (!HttpRequest.isInstance(request) || config.isCustomEndpoint)\n                            return [2, next(__assign({}, args))];\n                        if (!(request.hostname === \"s3.amazonaws.com\")) return [3, 1];\n                        request.hostname = \"s3.us-east-1.amazonaws.com\";\n                        return [3, 3];\n                    case 1:\n                        _a = \"aws-global\";\n                        return [4, config.region()];\n                    case 2:\n                        if (_a === (_b.sent())) {\n                            request.hostname = \"s3.amazonaws.com\";\n                        }\n                        _b.label = 3;\n                    case 3: return [2, next(__assign({}, args))];\n                }\n            });\n        }); };\n    };\n};\nexport var useRegionalEndpointMiddlewareOptions = {\n    step: \"build\",\n    tags: [\"USE_REGIONAL_ENDPOINT\", \"S3\"],\n    name: \"useRegionalEndpointMiddleware\",\n    override: true,\n};\nexport var getUseRegionalEndpointPlugin = function (config) { return ({\n    applyToStack: function (clientStack) {\n        clientStack.add(useRegionalEndpointMiddleware(config), useRegionalEndpointMiddlewareOptions);\n    },\n}); };\n"]},"metadata":{},"sourceType":"module"}