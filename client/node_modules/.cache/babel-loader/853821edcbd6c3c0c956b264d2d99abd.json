{"ast":null,"code":"import { __assign, __read } from \"tslib\";\nimport { DOT_PATTERN, getArnResources, getSuffix, getSuffixForArnEndpoint, isBucketNameOptions, isDnsCompatibleBucketName, validateAccountId, validateArnEndpointOptions, validateCustomEndpoint, validateDNSHostLabel, validateMrapAlias, validateNoDualstack, validateNoFIPS, validateOutpostService, validatePartition, validateRegion, validateRegionalClient, validateS3Service, validateService } from \"./bucketHostnameUtils\";\nexport var bucketHostname = function bucketHostname(options) {\n  validateCustomEndpoint(options);\n  return isBucketNameOptions(options) ? getEndpointFromBucketName(options) : getEndpointFromArn(options);\n};\n\nvar getEndpointFromBucketName = function getEndpointFromBucketName(_a) {\n  var _b = _a.accelerateEndpoint,\n      accelerateEndpoint = _b === void 0 ? false : _b,\n      region = _a.clientRegion,\n      baseHostname = _a.baseHostname,\n      bucketName = _a.bucketName,\n      _c = _a.dualstackEndpoint,\n      dualstackEndpoint = _c === void 0 ? false : _c,\n      _d = _a.fipsEndpoint,\n      fipsEndpoint = _d === void 0 ? false : _d,\n      _e = _a.pathStyleEndpoint,\n      pathStyleEndpoint = _e === void 0 ? false : _e,\n      _f = _a.tlsCompatible,\n      tlsCompatible = _f === void 0 ? true : _f,\n      _g = _a.isCustomEndpoint,\n      isCustomEndpoint = _g === void 0 ? false : _g;\n\n  var _h = __read(isCustomEndpoint ? [region, baseHostname] : getSuffix(baseHostname), 2),\n      clientRegion = _h[0],\n      hostnameSuffix = _h[1];\n\n  if (pathStyleEndpoint || !isDnsCompatibleBucketName(bucketName) || tlsCompatible && DOT_PATTERN.test(bucketName)) {\n    return {\n      bucketEndpoint: false,\n      hostname: dualstackEndpoint ? \"s3.dualstack.\".concat(clientRegion, \".\").concat(hostnameSuffix) : baseHostname\n    };\n  }\n\n  if (accelerateEndpoint) {\n    baseHostname = \"s3-accelerate\".concat(dualstackEndpoint ? \".dualstack\" : \"\", \".\").concat(hostnameSuffix);\n  } else if (dualstackEndpoint) {\n    baseHostname = \"s3.dualstack.\".concat(clientRegion, \".\").concat(hostnameSuffix);\n  }\n\n  return {\n    bucketEndpoint: true,\n    hostname: \"\".concat(bucketName, \".\").concat(baseHostname)\n  };\n};\n\nvar getEndpointFromArn = function getEndpointFromArn(options) {\n  var isCustomEndpoint = options.isCustomEndpoint,\n      baseHostname = options.baseHostname,\n      clientRegion = options.clientRegion;\n  var hostnameSuffix = isCustomEndpoint ? baseHostname : getSuffixForArnEndpoint(baseHostname)[1];\n  var pathStyleEndpoint = options.pathStyleEndpoint,\n      _a = options.accelerateEndpoint,\n      accelerateEndpoint = _a === void 0 ? false : _a,\n      _b = options.fipsEndpoint,\n      fipsEndpoint = _b === void 0 ? false : _b,\n      _c = options.tlsCompatible,\n      tlsCompatible = _c === void 0 ? true : _c,\n      bucketName = options.bucketName,\n      _d = options.clientPartition,\n      clientPartition = _d === void 0 ? \"aws\" : _d;\n  validateArnEndpointOptions({\n    pathStyleEndpoint: pathStyleEndpoint,\n    accelerateEndpoint: accelerateEndpoint,\n    tlsCompatible: tlsCompatible\n  });\n  var service = bucketName.service,\n      partition = bucketName.partition,\n      accountId = bucketName.accountId,\n      region = bucketName.region,\n      resource = bucketName.resource;\n  validateService(service);\n  validatePartition(partition, {\n    clientPartition: clientPartition\n  });\n  validateAccountId(accountId);\n\n  var _e = getArnResources(resource),\n      accesspointName = _e.accesspointName,\n      outpostId = _e.outpostId;\n\n  if (service === \"s3-object-lambda\") {\n    return getEndpointFromObjectLambdaArn(__assign(__assign({}, options), {\n      tlsCompatible: tlsCompatible,\n      bucketName: bucketName,\n      accesspointName: accesspointName,\n      hostnameSuffix: hostnameSuffix\n    }));\n  }\n\n  if (region === \"\") {\n    return getEndpointFromMRAPArn(__assign(__assign({}, options), {\n      clientRegion: clientRegion,\n      mrapAlias: accesspointName,\n      hostnameSuffix: hostnameSuffix\n    }));\n  }\n\n  if (outpostId) {\n    return getEndpointFromOutpostArn(__assign(__assign({}, options), {\n      clientRegion: clientRegion,\n      outpostId: outpostId,\n      accesspointName: accesspointName,\n      hostnameSuffix: hostnameSuffix\n    }));\n  }\n\n  return getEndpointFromAccessPointArn(__assign(__assign({}, options), {\n    clientRegion: clientRegion,\n    accesspointName: accesspointName,\n    hostnameSuffix: hostnameSuffix\n  }));\n};\n\nvar getEndpointFromObjectLambdaArn = function getEndpointFromObjectLambdaArn(_a) {\n  var _b = _a.dualstackEndpoint,\n      dualstackEndpoint = _b === void 0 ? false : _b,\n      _c = _a.fipsEndpoint,\n      fipsEndpoint = _c === void 0 ? false : _c,\n      _d = _a.tlsCompatible,\n      tlsCompatible = _d === void 0 ? true : _d,\n      useArnRegion = _a.useArnRegion,\n      clientRegion = _a.clientRegion,\n      _e = _a.clientSigningRegion,\n      clientSigningRegion = _e === void 0 ? clientRegion : _e,\n      accesspointName = _a.accesspointName,\n      bucketName = _a.bucketName,\n      hostnameSuffix = _a.hostnameSuffix;\n  var accountId = bucketName.accountId,\n      region = bucketName.region,\n      service = bucketName.service;\n  validateRegionalClient(clientRegion);\n  validateRegion(region, {\n    useArnRegion: useArnRegion,\n    clientRegion: clientRegion,\n    clientSigningRegion: clientSigningRegion,\n    allowFipsRegion: true,\n    useFipsEndpoint: fipsEndpoint\n  });\n  validateNoDualstack(dualstackEndpoint);\n  var DNSHostLabel = \"\".concat(accesspointName, \"-\").concat(accountId);\n  validateDNSHostLabel(DNSHostLabel, {\n    tlsCompatible: tlsCompatible\n  });\n  var endpointRegion = useArnRegion ? region : clientRegion;\n  var signingRegion = useArnRegion ? region : clientSigningRegion;\n  return {\n    bucketEndpoint: true,\n    hostname: \"\".concat(DNSHostLabel, \".\").concat(service).concat(fipsEndpoint ? \"-fips\" : \"\", \".\").concat(endpointRegion, \".\").concat(hostnameSuffix),\n    signingRegion: signingRegion,\n    signingService: service\n  };\n};\n\nvar getEndpointFromMRAPArn = function getEndpointFromMRAPArn(_a) {\n  var disableMultiregionAccessPoints = _a.disableMultiregionAccessPoints,\n      _b = _a.dualstackEndpoint,\n      dualstackEndpoint = _b === void 0 ? false : _b,\n      isCustomEndpoint = _a.isCustomEndpoint,\n      mrapAlias = _a.mrapAlias,\n      hostnameSuffix = _a.hostnameSuffix;\n\n  if (disableMultiregionAccessPoints === true) {\n    throw new Error(\"SDK is attempting to use a MRAP ARN. Please enable to feature.\");\n  }\n\n  validateMrapAlias(mrapAlias);\n  validateNoDualstack(dualstackEndpoint);\n  return {\n    bucketEndpoint: true,\n    hostname: \"\".concat(mrapAlias).concat(isCustomEndpoint ? \"\" : \".accesspoint.s3-global\", \".\").concat(hostnameSuffix),\n    signingRegion: \"*\"\n  };\n};\n\nvar getEndpointFromOutpostArn = function getEndpointFromOutpostArn(_a) {\n  var useArnRegion = _a.useArnRegion,\n      clientRegion = _a.clientRegion,\n      _b = _a.clientSigningRegion,\n      clientSigningRegion = _b === void 0 ? clientRegion : _b,\n      bucketName = _a.bucketName,\n      outpostId = _a.outpostId,\n      _c = _a.dualstackEndpoint,\n      dualstackEndpoint = _c === void 0 ? false : _c,\n      _d = _a.fipsEndpoint,\n      fipsEndpoint = _d === void 0 ? false : _d,\n      _e = _a.tlsCompatible,\n      tlsCompatible = _e === void 0 ? true : _e,\n      accesspointName = _a.accesspointName,\n      isCustomEndpoint = _a.isCustomEndpoint,\n      hostnameSuffix = _a.hostnameSuffix;\n  validateRegionalClient(clientRegion);\n  validateRegion(bucketName.region, {\n    useArnRegion: useArnRegion,\n    clientRegion: clientRegion,\n    clientSigningRegion: clientSigningRegion,\n    useFipsEndpoint: fipsEndpoint\n  });\n  var DNSHostLabel = \"\".concat(accesspointName, \"-\").concat(bucketName.accountId);\n  validateDNSHostLabel(DNSHostLabel, {\n    tlsCompatible: tlsCompatible\n  });\n  var endpointRegion = useArnRegion ? bucketName.region : clientRegion;\n  var signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;\n  validateOutpostService(bucketName.service);\n  validateDNSHostLabel(outpostId, {\n    tlsCompatible: tlsCompatible\n  });\n  validateNoDualstack(dualstackEndpoint);\n  validateNoFIPS(fipsEndpoint);\n  var hostnamePrefix = \"\".concat(DNSHostLabel, \".\").concat(outpostId);\n  return {\n    bucketEndpoint: true,\n    hostname: \"\".concat(hostnamePrefix).concat(isCustomEndpoint ? \"\" : \".s3-outposts.\".concat(endpointRegion), \".\").concat(hostnameSuffix),\n    signingRegion: signingRegion,\n    signingService: \"s3-outposts\"\n  };\n};\n\nvar getEndpointFromAccessPointArn = function getEndpointFromAccessPointArn(_a) {\n  var useArnRegion = _a.useArnRegion,\n      clientRegion = _a.clientRegion,\n      _b = _a.clientSigningRegion,\n      clientSigningRegion = _b === void 0 ? clientRegion : _b,\n      bucketName = _a.bucketName,\n      _c = _a.dualstackEndpoint,\n      dualstackEndpoint = _c === void 0 ? false : _c,\n      _d = _a.fipsEndpoint,\n      fipsEndpoint = _d === void 0 ? false : _d,\n      _e = _a.tlsCompatible,\n      tlsCompatible = _e === void 0 ? true : _e,\n      accesspointName = _a.accesspointName,\n      isCustomEndpoint = _a.isCustomEndpoint,\n      hostnameSuffix = _a.hostnameSuffix;\n  validateRegionalClient(clientRegion);\n  validateRegion(bucketName.region, {\n    useArnRegion: useArnRegion,\n    clientRegion: clientRegion,\n    clientSigningRegion: clientSigningRegion,\n    allowFipsRegion: true,\n    useFipsEndpoint: fipsEndpoint\n  });\n  var hostnamePrefix = \"\".concat(accesspointName, \"-\").concat(bucketName.accountId);\n  validateDNSHostLabel(hostnamePrefix, {\n    tlsCompatible: tlsCompatible\n  });\n  var endpointRegion = useArnRegion ? bucketName.region : clientRegion;\n  var signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;\n  validateS3Service(bucketName.service);\n  return {\n    bucketEndpoint: true,\n    hostname: \"\".concat(hostnamePrefix).concat(isCustomEndpoint ? \"\" : \".s3-accesspoint\".concat(fipsEndpoint ? \"-fips\" : \"\").concat(dualstackEndpoint ? \".dualstack\" : \"\", \".\").concat(endpointRegion), \".\").concat(hostnameSuffix),\n    signingRegion: signingRegion\n  };\n};","map":{"version":3,"sources":["/home/chuka/joe/ChopChowSD/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-es/bucketHostname.js"],"names":["__assign","__read","DOT_PATTERN","getArnResources","getSuffix","getSuffixForArnEndpoint","isBucketNameOptions","isDnsCompatibleBucketName","validateAccountId","validateArnEndpointOptions","validateCustomEndpoint","validateDNSHostLabel","validateMrapAlias","validateNoDualstack","validateNoFIPS","validateOutpostService","validatePartition","validateRegion","validateRegionalClient","validateS3Service","validateService","bucketHostname","options","getEndpointFromBucketName","getEndpointFromArn","_a","_b","accelerateEndpoint","region","clientRegion","baseHostname","bucketName","_c","dualstackEndpoint","_d","fipsEndpoint","_e","pathStyleEndpoint","_f","tlsCompatible","_g","isCustomEndpoint","_h","hostnameSuffix","test","bucketEndpoint","hostname","concat","clientPartition","service","partition","accountId","resource","accesspointName","outpostId","getEndpointFromObjectLambdaArn","getEndpointFromMRAPArn","mrapAlias","getEndpointFromOutpostArn","getEndpointFromAccessPointArn","useArnRegion","clientSigningRegion","allowFipsRegion","useFipsEndpoint","DNSHostLabel","endpointRegion","signingRegion","signingService","disableMultiregionAccessPoints","Error","hostnamePrefix"],"mappings":"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","sourcesContent":["import { __assign, __read } from \"tslib\";\nimport { DOT_PATTERN, getArnResources, getSuffix, getSuffixForArnEndpoint, isBucketNameOptions, isDnsCompatibleBucketName, validateAccountId, validateArnEndpointOptions, validateCustomEndpoint, validateDNSHostLabel, validateMrapAlias, validateNoDualstack, validateNoFIPS, validateOutpostService, validatePartition, validateRegion, validateRegionalClient, validateS3Service, validateService, } from \"./bucketHostnameUtils\";\nexport var bucketHostname = function (options) {\n    validateCustomEndpoint(options);\n    return isBucketNameOptions(options)\n        ?\n            getEndpointFromBucketName(options)\n        :\n            getEndpointFromArn(options);\n};\nvar getEndpointFromBucketName = function (_a) {\n    var _b = _a.accelerateEndpoint, accelerateEndpoint = _b === void 0 ? false : _b, region = _a.clientRegion, baseHostname = _a.baseHostname, bucketName = _a.bucketName, _c = _a.dualstackEndpoint, dualstackEndpoint = _c === void 0 ? false : _c, _d = _a.fipsEndpoint, fipsEndpoint = _d === void 0 ? false : _d, _e = _a.pathStyleEndpoint, pathStyleEndpoint = _e === void 0 ? false : _e, _f = _a.tlsCompatible, tlsCompatible = _f === void 0 ? true : _f, _g = _a.isCustomEndpoint, isCustomEndpoint = _g === void 0 ? false : _g;\n    var _h = __read(isCustomEndpoint ? [region, baseHostname] : getSuffix(baseHostname), 2), clientRegion = _h[0], hostnameSuffix = _h[1];\n    if (pathStyleEndpoint || !isDnsCompatibleBucketName(bucketName) || (tlsCompatible && DOT_PATTERN.test(bucketName))) {\n        return {\n            bucketEndpoint: false,\n            hostname: dualstackEndpoint ? \"s3.dualstack.\".concat(clientRegion, \".\").concat(hostnameSuffix) : baseHostname,\n        };\n    }\n    if (accelerateEndpoint) {\n        baseHostname = \"s3-accelerate\".concat(dualstackEndpoint ? \".dualstack\" : \"\", \".\").concat(hostnameSuffix);\n    }\n    else if (dualstackEndpoint) {\n        baseHostname = \"s3.dualstack.\".concat(clientRegion, \".\").concat(hostnameSuffix);\n    }\n    return {\n        bucketEndpoint: true,\n        hostname: \"\".concat(bucketName, \".\").concat(baseHostname),\n    };\n};\nvar getEndpointFromArn = function (options) {\n    var isCustomEndpoint = options.isCustomEndpoint, baseHostname = options.baseHostname, clientRegion = options.clientRegion;\n    var hostnameSuffix = isCustomEndpoint ? baseHostname : getSuffixForArnEndpoint(baseHostname)[1];\n    var pathStyleEndpoint = options.pathStyleEndpoint, _a = options.accelerateEndpoint, accelerateEndpoint = _a === void 0 ? false : _a, _b = options.fipsEndpoint, fipsEndpoint = _b === void 0 ? false : _b, _c = options.tlsCompatible, tlsCompatible = _c === void 0 ? true : _c, bucketName = options.bucketName, _d = options.clientPartition, clientPartition = _d === void 0 ? \"aws\" : _d;\n    validateArnEndpointOptions({ pathStyleEndpoint: pathStyleEndpoint, accelerateEndpoint: accelerateEndpoint, tlsCompatible: tlsCompatible });\n    var service = bucketName.service, partition = bucketName.partition, accountId = bucketName.accountId, region = bucketName.region, resource = bucketName.resource;\n    validateService(service);\n    validatePartition(partition, { clientPartition: clientPartition });\n    validateAccountId(accountId);\n    var _e = getArnResources(resource), accesspointName = _e.accesspointName, outpostId = _e.outpostId;\n    if (service === \"s3-object-lambda\") {\n        return getEndpointFromObjectLambdaArn(__assign(__assign({}, options), { tlsCompatible: tlsCompatible, bucketName: bucketName, accesspointName: accesspointName, hostnameSuffix: hostnameSuffix }));\n    }\n    if (region === \"\") {\n        return getEndpointFromMRAPArn(__assign(__assign({}, options), { clientRegion: clientRegion, mrapAlias: accesspointName, hostnameSuffix: hostnameSuffix }));\n    }\n    if (outpostId) {\n        return getEndpointFromOutpostArn(__assign(__assign({}, options), { clientRegion: clientRegion, outpostId: outpostId, accesspointName: accesspointName, hostnameSuffix: hostnameSuffix }));\n    }\n    return getEndpointFromAccessPointArn(__assign(__assign({}, options), { clientRegion: clientRegion, accesspointName: accesspointName, hostnameSuffix: hostnameSuffix }));\n};\nvar getEndpointFromObjectLambdaArn = function (_a) {\n    var _b = _a.dualstackEndpoint, dualstackEndpoint = _b === void 0 ? false : _b, _c = _a.fipsEndpoint, fipsEndpoint = _c === void 0 ? false : _c, _d = _a.tlsCompatible, tlsCompatible = _d === void 0 ? true : _d, useArnRegion = _a.useArnRegion, clientRegion = _a.clientRegion, _e = _a.clientSigningRegion, clientSigningRegion = _e === void 0 ? clientRegion : _e, accesspointName = _a.accesspointName, bucketName = _a.bucketName, hostnameSuffix = _a.hostnameSuffix;\n    var accountId = bucketName.accountId, region = bucketName.region, service = bucketName.service;\n    validateRegionalClient(clientRegion);\n    validateRegion(region, {\n        useArnRegion: useArnRegion,\n        clientRegion: clientRegion,\n        clientSigningRegion: clientSigningRegion,\n        allowFipsRegion: true,\n        useFipsEndpoint: fipsEndpoint,\n    });\n    validateNoDualstack(dualstackEndpoint);\n    var DNSHostLabel = \"\".concat(accesspointName, \"-\").concat(accountId);\n    validateDNSHostLabel(DNSHostLabel, { tlsCompatible: tlsCompatible });\n    var endpointRegion = useArnRegion ? region : clientRegion;\n    var signingRegion = useArnRegion ? region : clientSigningRegion;\n    return {\n        bucketEndpoint: true,\n        hostname: \"\".concat(DNSHostLabel, \".\").concat(service).concat(fipsEndpoint ? \"-fips\" : \"\", \".\").concat(endpointRegion, \".\").concat(hostnameSuffix),\n        signingRegion: signingRegion,\n        signingService: service,\n    };\n};\nvar getEndpointFromMRAPArn = function (_a) {\n    var disableMultiregionAccessPoints = _a.disableMultiregionAccessPoints, _b = _a.dualstackEndpoint, dualstackEndpoint = _b === void 0 ? false : _b, isCustomEndpoint = _a.isCustomEndpoint, mrapAlias = _a.mrapAlias, hostnameSuffix = _a.hostnameSuffix;\n    if (disableMultiregionAccessPoints === true) {\n        throw new Error(\"SDK is attempting to use a MRAP ARN. Please enable to feature.\");\n    }\n    validateMrapAlias(mrapAlias);\n    validateNoDualstack(dualstackEndpoint);\n    return {\n        bucketEndpoint: true,\n        hostname: \"\".concat(mrapAlias).concat(isCustomEndpoint ? \"\" : \".accesspoint.s3-global\", \".\").concat(hostnameSuffix),\n        signingRegion: \"*\",\n    };\n};\nvar getEndpointFromOutpostArn = function (_a) {\n    var useArnRegion = _a.useArnRegion, clientRegion = _a.clientRegion, _b = _a.clientSigningRegion, clientSigningRegion = _b === void 0 ? clientRegion : _b, bucketName = _a.bucketName, outpostId = _a.outpostId, _c = _a.dualstackEndpoint, dualstackEndpoint = _c === void 0 ? false : _c, _d = _a.fipsEndpoint, fipsEndpoint = _d === void 0 ? false : _d, _e = _a.tlsCompatible, tlsCompatible = _e === void 0 ? true : _e, accesspointName = _a.accesspointName, isCustomEndpoint = _a.isCustomEndpoint, hostnameSuffix = _a.hostnameSuffix;\n    validateRegionalClient(clientRegion);\n    validateRegion(bucketName.region, { useArnRegion: useArnRegion, clientRegion: clientRegion, clientSigningRegion: clientSigningRegion, useFipsEndpoint: fipsEndpoint });\n    var DNSHostLabel = \"\".concat(accesspointName, \"-\").concat(bucketName.accountId);\n    validateDNSHostLabel(DNSHostLabel, { tlsCompatible: tlsCompatible });\n    var endpointRegion = useArnRegion ? bucketName.region : clientRegion;\n    var signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;\n    validateOutpostService(bucketName.service);\n    validateDNSHostLabel(outpostId, { tlsCompatible: tlsCompatible });\n    validateNoDualstack(dualstackEndpoint);\n    validateNoFIPS(fipsEndpoint);\n    var hostnamePrefix = \"\".concat(DNSHostLabel, \".\").concat(outpostId);\n    return {\n        bucketEndpoint: true,\n        hostname: \"\".concat(hostnamePrefix).concat(isCustomEndpoint ? \"\" : \".s3-outposts.\".concat(endpointRegion), \".\").concat(hostnameSuffix),\n        signingRegion: signingRegion,\n        signingService: \"s3-outposts\",\n    };\n};\nvar getEndpointFromAccessPointArn = function (_a) {\n    var useArnRegion = _a.useArnRegion, clientRegion = _a.clientRegion, _b = _a.clientSigningRegion, clientSigningRegion = _b === void 0 ? clientRegion : _b, bucketName = _a.bucketName, _c = _a.dualstackEndpoint, dualstackEndpoint = _c === void 0 ? false : _c, _d = _a.fipsEndpoint, fipsEndpoint = _d === void 0 ? false : _d, _e = _a.tlsCompatible, tlsCompatible = _e === void 0 ? true : _e, accesspointName = _a.accesspointName, isCustomEndpoint = _a.isCustomEndpoint, hostnameSuffix = _a.hostnameSuffix;\n    validateRegionalClient(clientRegion);\n    validateRegion(bucketName.region, {\n        useArnRegion: useArnRegion,\n        clientRegion: clientRegion,\n        clientSigningRegion: clientSigningRegion,\n        allowFipsRegion: true,\n        useFipsEndpoint: fipsEndpoint,\n    });\n    var hostnamePrefix = \"\".concat(accesspointName, \"-\").concat(bucketName.accountId);\n    validateDNSHostLabel(hostnamePrefix, { tlsCompatible: tlsCompatible });\n    var endpointRegion = useArnRegion ? bucketName.region : clientRegion;\n    var signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;\n    validateS3Service(bucketName.service);\n    return {\n        bucketEndpoint: true,\n        hostname: \"\".concat(hostnamePrefix).concat(isCustomEndpoint\n            ? \"\"\n            : \".s3-accesspoint\".concat(fipsEndpoint ? \"-fips\" : \"\").concat(dualstackEndpoint ? \".dualstack\" : \"\", \".\").concat(endpointRegion), \".\").concat(hostnameSuffix),\n        signingRegion: signingRegion,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}