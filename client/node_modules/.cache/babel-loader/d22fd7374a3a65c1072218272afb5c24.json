{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { HttpResponse } from \"@aws-sdk/protocol-http\";\nexport var throw200ExceptionsMiddleware = function throw200ExceptionsMiddleware(config) {\n  return function (next) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var result, response, statusCode, body, bodyBytes, bodyString, err;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4, next(args)];\n\n            case 1:\n              result = _a.sent();\n              response = result.response;\n              if (!HttpResponse.isInstance(response)) return [2, result];\n              statusCode = response.statusCode, body = response.body;\n              if (statusCode < 200 && statusCode >= 300) return [2, result];\n              return [4, collectBody(body, config)];\n\n            case 2:\n              bodyBytes = _a.sent();\n              return [4, collectBodyString(bodyBytes, config)];\n\n            case 3:\n              bodyString = _a.sent();\n\n              if (bodyBytes.length === 0) {\n                err = new Error(\"S3 aborted request\");\n                err.name = \"InternalError\";\n                throw err;\n              }\n\n              if (bodyString && bodyString.match(\"<Error>\")) {\n                response.statusCode = 400;\n              }\n\n              response.body = bodyBytes;\n              return [2, result];\n          }\n        });\n      });\n    };\n  };\n};\n\nvar collectBody = function collectBody(streamBody, context) {\n  if (streamBody === void 0) {\n    streamBody = new Uint8Array();\n  }\n\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n\nvar collectBodyString = function collectBodyString(streamBody, context) {\n  return collectBody(streamBody, context).then(function (body) {\n    return context.utf8Encoder(body);\n  });\n};\n\nexport var throw200ExceptionsMiddlewareOptions = {\n  relation: \"after\",\n  toMiddleware: \"deserializerMiddleware\",\n  tags: [\"THROW_200_EXCEPTIONS\", \"S3\"],\n  name: \"throw200ExceptionsMiddleware\",\n  override: true\n};\nexport var getThrow200ExceptionsPlugin = function getThrow200ExceptionsPlugin(config) {\n  return {\n    applyToStack: function applyToStack(clientStack) {\n      clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"sources":["/home/chuka/joe/ChopChowSD/node_modules/@aws-sdk/middleware-sdk-s3/dist-es/throw-200-exceptions.js"],"names":["__awaiter","__generator","HttpResponse","throw200ExceptionsMiddleware","config","next","args","result","response","statusCode","body","bodyBytes","bodyString","err","_a","label","sent","isInstance","collectBody","collectBodyString","length","Error","name","match","streamBody","context","Uint8Array","Promise","resolve","streamCollector","then","utf8Encoder","throw200ExceptionsMiddlewareOptions","relation","toMiddleware","tags","override","getThrow200ExceptionsPlugin","applyToStack","clientStack","addRelativeTo"],"mappings":"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","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { HttpResponse } from \"@aws-sdk/protocol-http\";\nexport var throw200ExceptionsMiddleware = function (config) {\n    return function (next) {\n        return function (args) { return __awaiter(void 0, void 0, void 0, function () {\n            var result, response, statusCode, body, bodyBytes, bodyString, err;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, next(args)];\n                    case 1:\n                        result = _a.sent();\n                        response = result.response;\n                        if (!HttpResponse.isInstance(response))\n                            return [2, result];\n                        statusCode = response.statusCode, body = response.body;\n                        if (statusCode < 200 && statusCode >= 300)\n                            return [2, result];\n                        return [4, collectBody(body, config)];\n                    case 2:\n                        bodyBytes = _a.sent();\n                        return [4, collectBodyString(bodyBytes, config)];\n                    case 3:\n                        bodyString = _a.sent();\n                        if (bodyBytes.length === 0) {\n                            err = new Error(\"S3 aborted request\");\n                            err.name = \"InternalError\";\n                            throw err;\n                        }\n                        if (bodyString && bodyString.match(\"<Error>\")) {\n                            response.statusCode = 400;\n                        }\n                        response.body = bodyBytes;\n                        return [2, result];\n                }\n            });\n        }); };\n    };\n};\nvar collectBody = function (streamBody, context) {\n    if (streamBody === void 0) { streamBody = new Uint8Array(); }\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nvar collectBodyString = function (streamBody, context) {\n    return collectBody(streamBody, context).then(function (body) { return context.utf8Encoder(body); });\n};\nexport var throw200ExceptionsMiddlewareOptions = {\n    relation: \"after\",\n    toMiddleware: \"deserializerMiddleware\",\n    tags: [\"THROW_200_EXCEPTIONS\", \"S3\"],\n    name: \"throw200ExceptionsMiddleware\",\n    override: true,\n};\nexport var getThrow200ExceptionsPlugin = function (config) { return ({\n    applyToStack: function (clientStack) {\n        clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);\n    },\n}); };\n"]},"metadata":{},"sourceType":"module"}