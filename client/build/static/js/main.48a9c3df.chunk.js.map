{"version":3,"sources":["components/mealMenu/ListedMealsSection.js","components/mealMenu/RecipeContentSection.js","components/mealMenu/IngredientSection.js","App.js","App2.js","serviceWorker.js","index.js"],"names":["ListedMealsSection","_this","this","styles","backgroundColor","mealsListed","props","recipes","map","meal","selectedMeal","react_default","a","createElement","key","id","onClick","showIngredients","style","label","Component","RecipeContentSection","mealPrep","instructions","step","src","imageSrc","alt","width","height","readTime","cookTime","reactjs_popup_es","trigger","modal","contentStyle","close","className","containerStyle","listStyle","display","maxWidth","maxHeight","IngredientSection","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","number","ingredientPopOver","stored_ingredients","Garri","availability","Water","Sugar","Rice- 3 Cups","Tomatoes x 6","Onion x 2","Palm Oil- 2 Cups","Black Eyed Beans x 1 bag(350mL)","Onions x 2","Potatoes - 8","Garlic- 6 cloves","Thyme","Oregano","Basil","Parmesan Cheese","Oil","Butter","IngredientInfoToggle","bind","assertThisInitialized","state","e","console","log","target","i","_this2","ingredientCount","ingredients","length","mealIngredients","ingredient","onMouseOver","onMouseOut","Popover","placement","isOpen","toggle","PopoverBody","React","App2","meals","new_ingredient","servings","quantitiy","measurements","quantity","meal_popups","event","mealString","innerText","setState","selectedMealIngredients","suggestMealToggle","suggestMealPopOver","mealSelected","IngredientsListed","new_ingredients","hidden","showProducts","mealsLength","index","items","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","_ref","value","_ref2","slicedToArray","ingredientsList","push","x","document","getElementById","color","Button","closeOnDocumentClick","align","_iterator","entries","Symbol","iterator","next","done","err","return","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Text","Form","inline","FormControl","type","placeholder","variant","lib","options","overflow","Boolean","window","location","hostname","match","ReactDOM","render","src_App2","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48a9c3df.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass ListedMealsSection extends Component {\n    \n        render() {\n            let styles ={\n                \"backgroundColor\":'#fd8953'\n            }\n            const mealsListed = this.props.recipes.map(\n                (meal)=> {\n                    //console.log(this.props.selectedMeal);\n                    if(meal === this.props.selectedMeal){\n                        return  <li key={meal.id} onClick={this.props.showIngredients}> <span style={styles}><b>{meal.label}</b></span> </li>\n                    }\n                    else{\n                        return <li key={meal.id} onClick={this.props.showIngredients}> {meal.label} </li>\n                    }\n                })\n\n            return (\n                <div>                    \n                    <ol> {mealsListed} </ol>\n                </div>\n            );\n        }\n}\n\nexport default ListedMealsSection;","import React, { Component } from 'react';\n//import {Typeahead} from 'react-bootstrap-typeahead';\nimport Popup from \"reactjs-popup\";\nimport './RecipeContent.css';\n\n\nclass RecipeContentSection extends Component {\n   \n    render(){\n        //var imgsrc = this.props.selectedMeal.imageSrc;\n        const mealPrep = this.props.selectedMeal.instructions.map((step)=> <li key={step} > {step} </li>);\n\n            return (\n                <div>                  \n                    <div>{this.props.selectedMeal.label} </div>\n                    <div> \n                    {/* <img src={require('./images/Garri.jpg')}/> */}\n                    {/* <img src={this.props.selectedMeal.imageSrc} alt=\"alt\"/> */}\n                    <img src={this.props.selectedMeal.imageSrc} alt='info' style={{width:'350px', height:'350px'}}/>\n                    {/* <img src={require('/images/Garri.jpg')} alt='info' style={{width:'13px', height:'13px'}}/> */}\n                    </div>\n                    <div>{this.props.selectedMeal.readTime} </div>\n                    <div> {this.props.selectedMeal.cookTime}</div>\n                    <Popup trigger={<u>Click here to read steps</u>} modal \n                        contentStyle={contentStyle}>\n                        {close => (\n                            <div>\n                                <a className=\"close\" onClick={close}>&times;</a>\n                                <div className=\"container\" style={containerStyle} id=\"bigContainer\">\n                                <div className=\"row align-items-center\">\n                                    <img src={this.props.selectedMeal.imageSrc} alt='info' style={{width:'35%', height:'35%'}}></img>\n                                    <div className=\"col-sm\"><ol style={listStyle}>{mealPrep}</ol></div>\n                                </div>\n                                    <div className=\"row\" >\n                                     <div className=\"container\"> {/*Trying to create a new sub container*/}\n                                        <div className = \"row\">\n                                            <div className=\"col-sm\">\n                                                \n                                            </div>\n                                        </div>\n                                         </div>\n                                        \n        {/*<img src=\"../images/Arrow--NicholasJudy456.png\" width=\"50%\" height=\"40%\" onclick=\"DoSomething();\"/>*/}\n        {/* <button onClick=\"DoSomething\" style={buttonStyle}>Next Page</button> */}\n                                    </div>\n                            </div>\n                        </div>\n                        )}           \n                    </Popup>\n                    {/* <ol> {mealPrep}</ol> {/*trigger={<a href=\"#\">Click hear to read steps</a>}*/}\n\n                </div>\n        );\n            \n    } \n\n   \n    \n}\n\nconst containerStyle = {\n        //font: \"50px\",\n        display: \"inline-block\",\n        width: \"100%\",\n        height: \"100%\"\n}\n\nconst contentStyle = {\n    // borderRadius: \"25px\",\n    maxWidth: \"100%\",\n    maxHeight: \"100%\",\n    // width: \"90%\",\n    // height: \"50%\",\n   \n};\n\nconst listStyle = {\n   \n}\n\n// const buttonStyle={\n//     display:\"inline-block\"\n// }\n\n// const arrowPic = {\n//     width: \"50%\",\n//     height: \"40%\"\n// }\n\n\n\n\nexport default RecipeContentSection;\n","import React from 'react';\nimport { Popover, PopoverBody } from 'reactstrap';\n\n\nclass IngredientSection extends React.Component {\n    number = 3;\n    ingredientPopOver= true;\n    stored_ingredients= [{ \"Garri\": {availability: [\"Lizy Gidy\"]}, \"Water\": {availability: [\"Lizy Gidy\"]}, \"Sugar\": {availability: [\"Lizy Gidy\"]},\n\"Rice- 3 Cups\": {availability: [\"Lizy Gidy\"]}, \"Tomatoes x 6\": {availability: [\"Lizy Gidy\"]}, \"Onion x 2\": {availability: [\"Lizy Gidy\"]}, \n\"Palm Oil- 2 Cups\": {availability: [\"Lizy Gidy\"]},\"Black Eyed Beans x 1 bag(350mL)\": {availability: [\"Lizy Gidy\"]}, \"Onions x 2\": {availability: [\"Lizy Gidy\"]},\n\"Potatoes - 8\": {availability: [\"Lizy Gidy\"]}, \"Garlic- 6 cloves\": {availability: [\"Lizy Gidy\"]}, \n\"Thyme\": {availability: [\"Lizy Gidy\"]}, \"Oregano\": {availability: [\"Lizy Gidy\"]}, \"Basil\": {availability: [\"Lizy Gidy\"]},\n\"Parmesan Cheese\": {availability: [\"Lizy Gidy\"]}, \"Oil\": {availability: [\"Lizy Gidy\"]}, \"Butter\": {availability: [\"Lizy Gidy\"]}}];\n\n    constructor(props){\n        super(props);\n        this.IngredientInfoToggle = this.IngredientInfoToggle.bind(this);\n\n        this.state={\n            ingredientPopOver: false,\n        }\n    }\n\n    IngredientInfoToggle(e) {\n        console.log(\"toggled by:\"+e.target);\n        console.log()\n        // figure out which popver it is\n        // this.setState({\n        //     ingredientPopOver: !this.state.ingredientPopOver\n        // });\n    }\n\n    render(){\n        let ingredientCount = this.props.selectedMeal.ingredients.length;\n         const mealIngredients = (this.props.selectedMeal.ingredients).map((ingredient)=>\n            <li key={ingredient}> {ingredient} &nbsp;\n                <span id={ingredient} onMouseOver={this.IngredientInfoToggle} onMouseOut={this.IngredientInfoToggle} >\n                    <img src=\"/images/info_icon.png\" alt=\"Product details not found\" style={{width:'13px', height:'13px'}}/>\n                </span>\n            </li>\n                     );\n\n        var i;\n        var popovers;\n        for(i=0; i< ingredientCount;i++){\n            popovers+= <Popover placement=\"auto\" isOpen={this.ingredientPopOver} target={this.props.selectedMeal.ingredients[i]} toggle={this.IngredientInfoToggle}>\n            <PopoverBody><div className=\"payback-disclaimer\">\n                In Stock in {this.stored_ingredients} store(s)<br></br>\n                <hr></hr>\n                <button>Add to WishList</button><br></br>\n                <button>Add to Cart </button> <br></br>\n                    \n            </div></PopoverBody>\n        </Popover>;\n        }\n        // const popovers = (this.props.selectedMeal.ingredients).map((ingredient)=>\n        //     <Popover placement=\"auto\" isOpen={this.ingredientPopOver} target={ingredient} toggle={this.IngredientInfoToggle}>\n        //         <PopoverBody><div className=\"payback-disclaimer\">\n        //             In Stock in {this.stored_ingredients} store(s)<br></br>\n        //             <hr></hr>\n        //             <button>Add to WishList</button><br></br>\n        //             <button>Add to Cart </button> <br></br>\n                        \n        //         </div></PopoverBody>\n        //     </Popover>);\n        {/* const mealIngredients = <li>{this.props.selectedMeal}</li>;\n         (this.props.selectedMeal.ingredients).map(\n             (ingredient) => \n             <li key={ingredient[0].toString()}> {ingredient} s {ingredient[0]} t\n             <span id=\"Popover2\" onMouseOver={this.IngredientInfoToggle} onMouseOut={this.IngredientInfoToggle} >\n             <img src=\"/images/info_icon.png\" alt=\"info\" style={{width:'13px', height:'13px'}}/> </span></li> ); */}\n\n            return (\n                <div>                    \n                    <ul> {mealIngredients} </ul>\n                    {/* {popovers} */}\n                    {/* <Popover placement=\"auto\" isOpen={this.ingredientPopOver} target={'Garri'} toggle={this.IngredientInfoToggle}>\n            <PopoverBody><div className=\"payback-disclaimer\">\n                In Stock in {this.stored_ingredients} store(s)<br></br>\n                <hr></hr>\n                <button>Add to WishList</button><br></br>\n                <button>Add to Cart </button> <br></br>\n                    \n            </div></PopoverBody>\n        </Popover>; */}\n                    \n                    {/* <button>ADD ALL<br></br>PRODUCTS<br></br>TO CART</button> */}\n                </div>\n        );\n    }\n}\n\nexport default IngredientSection","import React, { Component } from 'react'; \n//import {Typeahead} from 'react-bootstrap-typeahead';\nimport ListedMealsSection from './components/mealMenu/ListedMealsSection';\nimport RecipeContentSection from './components/mealMenu/RecipeContentSection';\nimport IngredientSection from './components/mealMenu/IngredientSection';\nimport { Popover, PopoverBody } from 'reactstrap';\n\n\nclass App extends Component {\n\n    meals = [\n        {\n            id: 1,\n            label: \"Garri\",\n            imageSrc: '../images/Garri.jpg',\n            readTime: \"2 mins read\",\n            cookTime: \"2 mins to prepare\",\n            ingredients: [\"Garri\", \"Water\", \"Sugar\"],\n            new_ingredient:{\n                \"Garri\":{\n                servings:{\n                    quantitiy: 1,\n                    measurements: \"Cup(s)\"\n                }},\n                \"Water\":{\n                servings:{\n                    quantitiy: 1,\n                    measurements: \"Cup(s)\"\n                }},\n                \"Sugar\":{\n                    servings:{\n                        quantitiy: 1,\n                        measurements: \"Spoon(s)\"\n                    }}\n              \n            },\n            quantity:[1,2,1],\n            measurements:[\"Cup(s)\",\"Cup(s)\",\"Spoon(s)\"],\n            instructions: [\"Mix Garri and Sugar in a bowl\", \"Add ice, water and groundnuts as preffered\", \"Enjoy!\"],\n            servings: 1,\n            display: false\n        },\n        {\n            id: 2,\n            label: \"Puff Puff\",\n            imageSrc: '../images/puff_puff.jpg',\n            readTime: \"4 mins read\",\n            cookTime: \"80  mins to prepare\",\n            ingredients: [\"Water- 2 Cups\", \"Yeast - 2 and 1/4 teaspoons(1 packet)\", \"Flour- 3 and 1/2 Cups\", \"Sugar- 3/4 Cup\"],\n            new_ingredient:{\n                \"Garri\":{\n                servings:{\n                    quantitiy: 1,\n                    measurements: \"Cup(s)\"\n                }},\n                \"Water\":{\n                servings:{\n                    quantitiy: 1,\n                    measurements: \"Cup(s)\"\n                }},\n                \"Sugar\":{\n                    servings:{\n                        quantitiy: 1,\n                        measurements: \"Spoon(s)\"\n                    }}\n              \n            },\n            quantity:[1,2,1],\n            measurements:[\"Cup(s)\",\"Cup(s)\",\"Spoon(s)\"],\n            instructions: [\"Mix salt, sugar, water, and yeast . Set aside for 5 minutes.\",\n\"Add flour and mix.\",\n\"Let the mixture rise for approximately 1- 2 hours\",\n\"In a large,sauce pan pour vegetable oil into a pot, until it is at least 3 inches (or about 5 centimeters) high (too little will result in flatter balls), and place on low heat.\",\n\"Test to make sure the oil is hot enough by putting a ‘drop’ of batter into the oil. If it is not hot enough, the batter will stay at the bottom of the pot rather than rising to the top.\",\n\"Using your hands grab a little bit of mixture at time and drop in the oil.\",\n\"When the oil is hot enough, use a spoon to dish up the batter, and another spoon or spatula to drop it in the oil, sort of in the shape of a ball.\",\n\"Fry for a few minutes until the bottom side is golden brown.\",\n\"Turn the ball over and fry for a few more minutes until the other side is golden brown.\",\n\"Use a large spoon or something like that to take it out of the oil. I usually place them on napkins right away to soak up some of the excess oil.\",\n\"If desired, you can roll the finished product in table sugar or powdered sugar to make it sweeter\"],\n            servings: 4,\n            display: false\n        },\n        {\n            id: 3,\n            label: \"Jollof Rice\",\n            imageSrc: \"../images/Jollof.jpg\",\n            readTime: \"4 mins read\",\n            cookTime: \"45 mins to prepare\",\n            ingredients: [\"Rice- 3 Cups\", \"Tomatoes x 6\", \"Onion x 2\", \"Palm Oil- 2 Cups\"],\n            instructions:[ \"Tomato , Onion Tatashe, Rodo Blended in Blender\",\n            \"Vegetable Oil + Palm Oil, Low Heat in Pan\",\n            \"Add onions to Pan\", \"Add Tomato Paste\", \"Add Powdered Ginger, Garlic and Curry\",\n            \"Add Blended Tomatoes mix (If too thick, add water)\",\"Add seasoning, Maggi (Chicken Flavor), Salt\",\n        \"For Jollof Rice, add Bay Leaves.\"],\n            display: true\n        },\n        {\n            id: 4,\n            label: \"Fried Beans\",\n            imageSrc: \"../images/FriedBeans.jpg\",\n            readTime: \"4 mins read\",\n            cookTime: \"60 mins to prepare\",\n            ingredients: [\"Black Eyed Beans x 1 bag(350mL)\", \"Onions x 2\", \"Palm Oil- 2 Cups\"],\n            instructions: [\"Soak beans in water overnight\",\"The next day, chop 1 onion into thin slices, cut the other one into 4 big chunks then pound/grind the pepper.\",\n        \"Rinse the beans and put in a sizeable pot. I rinse it twice.\",\n     \"Pre-cook the sliced onions with a few drops of water to soften them a bit.\",\"When the beans is done, add salt, leave to dry up all the water and transfer the beans to another container.\",\n    \"Now, set a dry clean pot on the stove, pour the palm oil and heat it up till the oil melts (if congealed). Note that you should only heat it up, not bleach the oil. You will know it is hot enough when a piece of onion dropped into the oil sizzles.\",\n\"Add the precooked onions and stir for a bit.\", \"Add the ground Habanero pepper and stir till everything is heated up very well, at most 2 minutes.\",\"Add the beans and stir for about 2 minutes. Add salt if necessary.\",\n\"Cover and leave to simmer for about 2 minutes and it's done.\"],\n            display: true\n        },\n        {\n            id: 5,\n            label: \"Roasted Potatoes\",\n            imageSrc: \"../images/roasted_potatoes.jpg\",\n            readTime: \"3 mins read\",\n            cookTime: \"90 mins to prepare\",\n            ingredients: [\"Potatoes - 8\", \"Garlic- 6 cloves\",  \"Thyme\", \"Oregano\", \"Basil\", \"Parmesan Cheese\", \"Oil\", \"Butter\"],\n            instructions: [\"Adjust oven rack to lowest position and heat oven to 450 degrees. \", \"Cut potatoes into quarter chunks\",\n        \"Toss potatoes with oil, salt and pepper chopped garlic, Thyme, Oregano, Basil and then Parmesan Cheese\", \n    \"Arrange, cut side down, on a large lipped cookie sheet or jellyroll pan.\", \"Roast until tender and golden brown, or until desired crispiness about 30-45 minutes\",\"Add butter in between roasting for a savory taste, Transfer to a serving dish when ready.\"],\n            display: true\n        }\n    ]\n    constructor(props){\n        super(props);\n        this.suggestMealToggle = this.suggestMealToggle.bind(this);\n\n        this.state={\n            suggestMealPopOver: false,\n            mealsListed : false,\n            mealSelected : false,\n            IngredientsListed : false,\n            recipes: this.meals, //[this.Garri, this.Jollof_Rice],\n            selectedMealIngredients: this.meals[0].new_ingredients,\n            selectedMeal: this.meals[0],\n            showFakeIngredients:{\n                hidden: false\n            },\n            showIngredients:{\n                hidden: true\n            },\n            showFakeProducts:{\n                hidden: false\n            },\n            showProducts:{\n                hidden: true\n            }\n        }\n    }\n\n    showIngredients=(event)=>{\n        let mealString = event.target.innerText;\n        var meal;\n        for (meal in this.meals){\n            //console.log(this.meals[meal].label);\n            if (this.meals[meal].label === mealString){\n            //change selected ingredients\n                this.setState({selectedMealIngredients: this.meals[meal].ingredients});\n                this.setState({selectedMeal: this.meals[meal]});\n                break;\n            }\n        }\n        //console.log({meal}.name);\n        //get list of ingredients\n    }\n\n    suggestMealToggle() {\n        this.setState({\n            suggestMealPopOver: !this.state.suggestMealPopOver\n        });\n    }\n\n\n    render() {\n        // Render your page inside\n        // the layout provider\n        return (   \n            <div className=\"container\">\n                {/* <Typeahead options={this.meals} \n                placeholder=\"Find Meals (and Ingredients) here..\"\n                // onChange={(selected) => {\n                //     // Handle selections...\n                //   }}\n                // filterBy={['label', 'ingredients']}\n                /> */}\n                <br></br>\n                <div className=\"row\">\n                    <div className=\"col-sm\">\n                        <b>Meals</b>\n                        <ListedMealsSection \n                        recipes={this.state.recipes} showIngredients={this.showIngredients}\n                        selectedMeal={this.state.selectedMeal}/>\n                        <span>&#43;</span><input placeholder=\"Suggest Meal\"></input> \n                        \n                      &nbsp;<button>Submit <span id=\"Popover1\" onMouseOver={this.suggestMealToggle} onMouseOut={this.suggestMealToggle} >\n                      <img src=\"/images/info_icon.png\" alt=\"info\" style={{width:'13px', height:'13px'}}/> </span></button>\n                      {/* onClick={this.suggestMealToggle} */}\n                     </div>                     \n                    <div className=\"col-sm\">\n                        <b>Recipe Contents</b>\n                        <RecipeContentSection selectedMeal= {this.state.selectedMeal}/>\n                        \n                    </div>\n\n                    <div className=\"col-sm\">\n                        <b>Ingredients</b>\n                        <IngredientSection selectedMealIngredients= {this.state.selectedMealIngredients}\n                        selectedMeal= {this.state.selectedMeal}/>\n                        {/* <span>&#43;</span><input placeholder=\"Suggest Ingredient..\"></input> */}\n                    </div>\n                    \n                    <Popover placement=\"auto\" isOpen={this.state.suggestMealPopOver} target=\"Popover1\" toggle={this.suggestMealToggle}>\n                        <PopoverBody><div className=\"payback-disclaimer\">\n                        Suggestions by Guest Users are recorded, but do not change the publicly displayed Meals.\n                        </div></PopoverBody>\n                    </Popover>\n                </div>\n            </div>\n            \n        );\n    }\n} \n\nexport default App;\n\n","import React, { Component } from 'react'; \nimport {Typeahead} from 'react-bootstrap-typeahead';\n// import ListedMealsSection from './components/mealMenu/ListedMealsSection';\n// import RecipeContentSection from './components/mealMenu/RecipeContentSection';\n// import IngredientSection from './components/mealMenu/IngredientSection';\nimport {Nav, Navbar, NavDropdown, Form, FormControl, Button} from 'react-bootstrap'\nimport { Popover, PopoverBody } from 'reactstrap';\nimport Popup from \"reactjs-popup\";\n//import Collapse from 'react-bootstrap/Collapse';\n// import { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n\nclass App2 extends Component {\n\n    meals = [\n        {\n            id: 1,\n            label: \"Garri\",\n            imageSrc: '/images/Garri.jpg',\n            readTime: \"2 mins read\",\n            cookTime: \"2 mins to prepare\",\n            ingredients: [\"Garri\", \"Water\", \"Sugar\"],\n            new_ingredient:{\n                \"Garri\":{\n                servings:{\n                    quantitiy: 1,\n                    measurements: \"Cup(s)\"\n                }},\n                \"Water\":{\n                servings:{\n                    quantitiy: 1,\n                    measurements: \"Cup(s)\"\n                }},\n                \"Sugar\":{\n                    servings:{\n                        quantitiy: 1,\n                        measurements: \"Spoon(s)\"\n                    }}\n              \n            },\n            quantity:[1,2,1],\n            measurements:[\"Cup(s)\",\"Cup(s)\",\"Spoon(s)\"],\n            instructions: [\"Mix Garri and Sugar in a bowl\", \"Add ice, water and groundnuts as preffered\", \"Enjoy!\"],\n            servings: 1,\n            display: false\n        },\n        {\n            id: 2,\n            label: \"Puff Puff\",\n            imageSrc: '/images/puff_puff.jpg',\n            readTime: \"4 mins read\",\n            cookTime: \"80  mins to prepare\",\n            ingredients: [\"Water- 2 Cups\", \"Yeast - 2 and 1/4 teaspoons(1 packet)\", \"Flour- 3 and 1/2 Cups\", \"Sugar- 3/4 Cup\"],\n            new_ingredient:{\n                \"Garri\":{\n                servings:{\n                    quantitiy: 1,\n                    measurements: \"Cup(s)\"\n                }},\n                \"Water\":{\n                servings:{\n                    quantitiy: 1,\n                    measurements: \"Cup(s)\"\n                }},\n                \"Sugar\":{\n                    servings:{\n                        quantitiy: 1,\n                        measurements: \"Spoon(s)\"\n                    }}\n              \n            },\n            quantity:[1,2,1],\n            measurements:[\"Cup(s)\",\"Cup(s)\",\"Spoon(s)\"],\n            instructions: [\"Mix salt, sugar, water, and yeast . Set aside for 5 minutes.\",\n\"Add flour and mix.\",\n\"Let the mixture rise for approximately 1- 2 hours\",\n\"In a large,sauce pan pour vegetable oil into a pot, until it is at least 3 inches (or about 5 centimeters) high (too little will result in flatter balls), and place on low heat.\",\n\"Test to make sure the oil is hot enough by putting a ‘drop’ of batter into the oil. If it is not hot enough, the batter will stay at the bottom of the pot rather than rising to the top.\",\n\"Using your hands grab a little bit of mixture at time and drop in the oil.\",\n\"When the oil is hot enough, use a spoon to dish up the batter, and another spoon or spatula to drop it in the oil, sort of in the shape of a ball.\",\n\"Fry for a few minutes until the bottom side is golden brown.\",\n\"Turn the ball over and fry for a few more minutes until the other side is golden brown.\",\n\"Use a large spoon or something like that to take it out of the oil. I usually place them on napkins right away to soak up some of the excess oil.\",\n\"If desired, you can roll the finished product in table sugar or powdered sugar to make it sweeter\"],\n            servings: 4,\n            display: false\n        },\n        {\n            id: 3,\n            label: \"Jollof Rice\",\n            imageSrc: \"/images/Jollof.jpg\",\n            readTime: \"4 mins read\",\n            cookTime: \"45 mins to prepare\",\n            ingredients: [\"Rice- 3 Cups\", \"Tomatoes x 6\", \"Onion x 2\", \"Palm Oil- 2 Cups\"],\n            instructions:[ \"Tomato , Onion Tatashe, Rodo Blended in Blender\",\n            \"Vegetable Oil + Palm Oil, Low Heat in Pan\",\n            \"Add onions to Pan\", \"Add Tomato Paste\", \"Add Powdered Ginger, Garlic and Curry\",\n            \"Add Blended Tomatoes mix (If too thick, add water)\",\"Add seasoning, Maggi (Chicken Flavor), Salt\",\n        \"For Jollof Rice, add Bay Leaves.\"],\n            display: true\n        },\n        {\n            id: 4,\n            label: \"Fried Beans\",\n            imageSrc: \"/images/FriedBeans.jpg\",\n            readTime: \"4 mins read\",\n            cookTime: \"60 mins to prepare\",\n            ingredients: [\"Black Eyed Beans x 1 bag(350mL)\", \"Onions x 2\", \"Palm Oil- 2 Cups\"],\n            instructions: [\"Soak beans in water overnight\",\"The next day, chop 1 onion into thin slices, cut the other one into 4 big chunks then pound/grind the pepper.\",\n        \"Rinse the beans and put in a sizeable pot. I rinse it twice.\",\n     \"Pre-cook the sliced onions with a few drops of water to soften them a bit.\",\"When the beans is done, add salt, leave to dry up all the water and transfer the beans to another container.\",\n    \"Now, set a dry clean pot on the stove, pour the palm oil and heat it up till the oil melts (if congealed). Note that you should only heat it up, not bleach the oil. You will know it is hot enough when a piece of onion dropped into the oil sizzles.\",\n\"Add the precooked onions and stir for a bit.\", \"Add the ground Habanero pepper and stir till everything is heated up very well, at most 2 minutes.\",\"Add the beans and stir for about 2 minutes. Add salt if necessary.\",\n\"Cover and leave to simmer for about 2 minutes and it's done.\"],\n            display: true\n        },\n        {\n            id: 5,\n            label: \"Roasted Potatoes\",\n            imageSrc: \"/images/roasted_potatoes.jpg\",\n            readTime: \"3 mins read\",\n            cookTime: \"90 mins to prepare\",\n            ingredients: [\"Potatoes - 8\", \"Garlic- 6 cloves\",  \"Thyme\", \"Oregano\", \"Basil\", \"Parmesan Cheese\", \"Oil\", \"Butter\"],\n            instructions: [\"Adjust oven rack to lowest position and heat oven to 450 degrees. \", \"Cut potatoes into quarter chunks\",\n        \"Toss potatoes with oil, salt and pepper chopped garlic, Thyme, Oregano, Basil and then Parmesan Cheese\", \n    \"Arrange, cut side down, on a large lipped cookie sheet or jellyroll pan.\", \"Roast until tender and golden brown, or until desired crispiness about 30-45 minutes\",\"Add butter in between roasting for a savory taste, Transfer to a serving dish when ready.\"],\n            display: true\n        }\n    ]\n\n\n    constructor(props){\n        super(props);\n        this.suggestMealToggle = this.suggestMealToggle.bind(this);\n        //this.showIngredient = this.showIngredient.bind(this);\n\n        this.state={\n            suggestMealPopOver: false,\n            mealsListed : false,\n            mealSelected : false,\n            IngredientsListed : false,\n            recipes: this.meals, //[this.Garri, this.Jollof_Rice],\n            selectedMealIngredients: this.meals[0].new_ingredients,\n            selectedMeal: this.meals[0],\n            showIngredients:{\n                hidden: true\n            },\n            showProducts:{\n                hidden: true\n            },\n            //open: false,\n\n            mealsLength : this.meals.length\n        }\n    }\n\n    meal_popups  = [];\n\n    showIngredients=(event)=>{\n        let mealString = event.target.innerText;\n        var meal;\n        for (meal in this.meals){\n            //console.log(this.meals[meal].label);\n            if (this.meals[meal].label === mealString){\n            //change selected ingredients\n                this.setState({selectedMealIngredients: this.meals[meal].ingredients});\n                this.setState({selectedMeal: this.meals[meal]});\n                break;\n            }\n        }\n        //console.log({meal}.name);\n        //get list of ingredients\n    }\n\n    suggestMealToggle() {\n        this.setState({\n            suggestMealPopOver: !this.state.suggestMealPopOver\n        });\n    }\n\n    showIngredient(index){\n        console.log(\"updating popup boolean\");\n        this.meal_popups[index] = !this.meal_popups[index]\n    }\n\n\n    render() {\n        // Render your page inside\n        // the layout provider\n        //const elements = ['one', 'two', 'three'];\n\n        const items = []\n        \n        //const popOverInfo = []\n\n        for (const [index, value] of this.meals.entries()) {\n            //console.log();\n            const mealPrep = value.instructions.map((step)=> <li key={step} > {step} </li>);\n            //console.log(value);\n            var mealIngredient = value.ingredients ;\n            const ingredientsList = value.ingredients.map((step)=> <li key={step} > {step} </li>);\n            this.meal_popups.push(false);\n            console.log(this.meal_popups);\n            console.log(index);\n            items.push(\n                <div className=\"col-sm-12 col-md-6 col-lg-4 mealContainer\"  key = {value.id} >\n                    <div>\n                        <div style={containerStyle}>\n                            <img src={value.imageSrc} className=\"images\" style={{width:\"100%\"}} alt={value.id} onClick={()=>{\n                                this.meal_popups[index] = !this.meal_popups[index];\n                                console.log(this.meal_popups);\n                                var x = document.getElementById(value.ingredients);\n                                if(this.meal_popups[index]){\n                                    x.style.display = \"block\";\n                                }\n                                else{\n                                    x.style.display = \"none\";\n                                }\n                                }}></img>\n                            {/* <img src={value.imageSrc} className=\"images\" style={{width:\"100%\"}} alt={value.id} onClick={this.showIngredient(index)}></img> */}\n\n                        </div>\n                        <div style={{color: \"blue\"}}> {value.label}</div>\n                    </div>\n                <Popup \n                    trigger={\n                        <div id = {value.ingredients} style={{ display:\"none\"}}>\n                        {value.ingredients}   \n                        <Button>View Steps</Button>     \n                        </div> \n\n   \n                    } modal closeOnDocumentClick contentStyle={contentStyle}>\n\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <div className=\"col align-items-center\">{value.readTime}</div>\n                                <div className=\"col align-items-center\">{value.cookTime}</div>\n                                <div><b>Ingredients</b></div>\n                                <div className=\"col align-items-center\"><ol>{ingredientsList}</ol></div>\n                                <div><img src={value.imageSrc} alt='info' style={{ width:\"100%\", height:\"100%\", align:\"center\"}}></img></div>\n\n                            </div>\n               \n                            <div className=\"col\">\n                                <div className=\"col align-items-center\"><ol>{mealPrep}</ol></div>\n                            </div>\n                        </div>\n                    </div>\n                    {/* <div>\n                    <div className=\"col align-items-left\">\n                        <img src={value.imageSrc} alt='info'  style={{width:'35%', height:'35%', align:\"center\"}}></img>\n                    </div>\n                    <div>                            \n                        <div className=\"col align-items-center\"><ol>{mealPrep}</ol></div>\n                    </div>\n                    </div>\n                    */}\n                 </Popup>\n                    \n                </div>\n            )\n        }\n\n        return (\n            <div>\n                {/* <div> */}\n                    {/* <Router> */}\n\n                    <Navbar bg=\"light\" expand=\"lg\">\n                    <Navbar.Brand href=\"#home\">CC app menu bar</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Navbar.Text>\n                            text1\n                        </Navbar.Text>\n                        <Navbar.Text>\n                            text2 <a href=\"#login\">Chop Chow Tech Team</a>\n                        </Navbar.Text>\n                        {/* <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"#home\">Home</Nav.Link>\n                        <Nav.Link href=\"#link\">Link</Nav.Link> */}\n                        {/* <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n                            <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n                            <NavDropdown.Divider />\n                            <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n                        </NavDropdown> */}\n                        {/* </Nav> */}\n                        <Form inline>\n                        <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n                        <Button variant=\"outline-success\">Search</Button>\n                        </Form>\n                    </Navbar.Collapse>\n                    </Navbar>\n                    {/* </Router> */}\n                {/* </div> */}\n                <Typeahead options={this.meals} \n                placeholder=\"Find Meals (and Ingredients) here..\"\n                id=\"typeahead\"\n                // onChange={(selected) => {\n                //     // Handle selections...\n                //   }}\n                // filterBy={['label', 'ingredients']}\n                />\n                &nbsp; <span>&#43;</span><input placeholder=\"Suggest Meal\"></input> \n             &nbsp;<button>Submit <span id=\"Popover1\" onMouseOver={this.suggestMealToggle} onMouseOut={this.suggestMealToggle} >\n            <img src=\"/images/info_icon.png\" alt=\"info\" style={{width:'13px', height:'13px'}}/> </span></button>\n                \n                <Popover placement=\"auto\" isOpen={this.state.suggestMealPopOver} target=\"Popover1\" toggle={this.suggestMealToggle}>\n                        <PopoverBody><div className=\"payback-disclaimer\">\n                        Suggestions by Guest Users are recorded, but do not change the publicly displayed Meals.\n                        </div></PopoverBody>\n                </Popover>\n            <div className=\"container\">\n                <div className=\"row \">\n                    {items} \n                </div>\n            </div>\n    \n                {/* <div className=\"row\">\n                    <div className=\"col-sm\">\n                        <b>Meals</b>\n                        <ListedMealsSection \n                        recipes={this.state.recipes} showIngredients={this.showIngredients}\n                        selectedMeal={this.state.selectedMeal}/>\n                        \n                        \n                \n                     </div>                     \n                    <div className=\"col-sm\">\n                        <b>Recipe Contents</b>\n                        <RecipeContentSection selectedMeal= {this.state.selectedMeal}/>\n                        \n                    </div>\n\n                    <div className=\"col-sm\">\n                        <b>Ingredients</b>\n                        <IngredientSection selectedMealIngredients= {this.state.selectedMealIngredients}\n                        selectedMeal= {this.state.selectedMeal}/>\n                    </div>\n                    \n                    \n                </div> */}\n            </div>\n        );\n    }\n} \n\nconst containerStyle = {\n    //font: \"50px\",\n    display: \"inline-block\",\n    width: \"100%\",\n    height: \"100%\",\n    \n}\n\nconst contentStyle = {\n// borderRadius: \"25px\",\nmaxWidth: \"100vw\",\nmaxHeight: \"100vh\",\noverflow: \"scroll\"\n// width: \"90%\",\n// height: \"50%\",\n\n};\n\n\nexport default App2;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport App2 from './App2';\nimport * as serviceWorker from './serviceWorker';\n\n//ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<App2 />, document.getElementById('new_root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}