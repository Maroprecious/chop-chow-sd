{"version":3,"sources":["components/mealMenu/ListedMealsSection.js","components/mealMenu/RecipeContentSection.js","components/mealMenu/IngredientSection.js","App.js","serviceWorker.js","index.js"],"names":["ListedMealsSection","_this","this","styles","backgroundColor","mealsListed","props","recipes","map","meal","selectedMeal","react_default","a","createElement","key","id","onClick","showIngredients","style","label","Component","RecipeContentSection","mealPrep","instructions","step","src","imageSrc","alt","width","height","readTime","cookTime","IngredientSection","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","IngredientInfoToggle","bind","assertThisInitialized","state","ingredientPopOver","setState","_this2","mealIngredients","ingredients","ingredient","toString","onMouseOver","onMouseOut","React","App","meals","new_ingredient","Garri","servings","quantitiy","measurements","Water","Sugar","quantity","display","event","mealString","target","innerText","selectedMealIngredients","suggestMealToggle","suggestMealPopOver","mealSelected","IngredientsListed","new_ingredients","showFakeIngredients","hidden","showFakeProducts","showProducts","className","lib","options","placeholder","mealMenu_ListedMealsSection","mealMenu_RecipeContentSection","mealMenu_IngredientSection","Popover","placement","isOpen","toggle","PopoverBody","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f47b762.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass ListedMealsSection extends Component {\n    \n        render() {\n            let styles ={\n                \"backgroundColor\":'#fd8953'\n            }\n            const mealsListed = this.props.recipes.map(\n                (meal)=> {\n                    //console.log(this.props.selectedMeal);\n                    if(meal === this.props.selectedMeal){\n                        return  <li key={meal.id} onClick={this.props.showIngredients}> <span style={styles}><b>{meal.label}</b></span> </li>\n                    }\n                    else{\n                        return <li key={meal.id} onClick={this.props.showIngredients}> {meal.label} </li>\n                    }\n                })\n\n            return (\n                <div>                    \n                    <ol> {mealsListed} </ol>\n                </div>\n            );\n        }\n}\n\nexport default ListedMealsSection;","import React, { Component } from 'react';\n\nclass RecipeContentSection extends Component {\n    render(){\n        //var imgsrc = this.props.selectedMeal.imageSrc;\n        const mealPrep = this.props.selectedMeal.instructions.map((step)=> <li key={step} > {step} </li>);\n\n            return (\n                <div>                    \n                    <div>{this.props.selectedMeal.label} </div>\n                    <div> \n                    {/* <img src={require('./images/Garri.jpg')}/> */}\n                    {/* <img src={this.props.selectedMeal.imageSrc} alt=\"alt\"/> */}\n                    <img src={this.props.selectedMeal.imageSrc} alt='info' style={{width:'350px', height:'350px'}}/>\n                    {/* <img src={require('/images/Garri.jpg')} alt='info' style={{width:'13px', height:'13px'}}/> */}\n                    </div>\n                    <div>{this.props.selectedMeal.readTime} </div>\n                    <div> {this.props.selectedMeal.cookTime}</div>\n                    <ol> {mealPrep}</ol>\n\n                </div>\n        );\n    }\n}\n\nexport default RecipeContentSection;","import React from 'react';\nimport { Popover, PopoverBody } from 'reactstrap';\n\nclass IngredientSection extends React.Component {\n    constructor(props){\n        super(props);\n        this.IngredientInfoToggle = this.IngredientInfoToggle.bind(this);\n\n        this.state={\n            ingredientPopOver: false\n        }\n    }\n\n    IngredientInfoToggle() {\n        this.setState({\n            ingredientPopOver: !this.state.ingredientPopOver\n        });\n    }\n\n    render(){\n        let ingredientCount = this.props.selectedMeal;\n\n         const mealIngredients = (this.props.selectedMeal.ingredients).map((ingredient)=> \n         <li key={ingredient[0].toString()}> {ingredient} <span id=\"Popover2\" onMouseOver={this.IngredientInfoToggle} onMouseOut={this.IngredientInfoToggle} >\n        <img src=\"/images/info_icon.png\" alt=\"info\" style={{width:'13px', height:'13px'}}/> </span></li>);\n\n        {/* const mealIngredients = <li>{this.props.selectedMeal}</li>;\n         (this.props.selectedMeal.ingredients).map(\n             (ingredient) => \n             <li key={ingredient[0].toString()}> {ingredient} s {ingredient[0]} t\n             <span id=\"Popover2\" onMouseOver={this.IngredientInfoToggle} onMouseOut={this.IngredientInfoToggle} >\n             <img src=\"/images/info_icon.png\" alt=\"info\" style={{width:'13px', height:'13px'}}/> </span></li> ); */}\n\n            return (\n                <div>                    \n                    <ul> {mealIngredients} </ul>\n                    {/* <Popover placement=\"auto\" isOpen={this.state.ingredientPopOver} target=\"Popover2\" toggle={this.IngredientInfoToggle}>\n                        <PopoverBody><div className=\"payback-disclaimer\">\n                            Add to WishList<br></br>\n                            Add To Cart <br></br><hr></hr>\n                             <button>In Stock</button>\n                        </div></PopoverBody>\n                    </Popover> */}\n                </div>\n        );\n    }\n}\n\nexport default IngredientSection","import React, { Component } from 'react'; \nimport {Typeahead} from 'react-bootstrap-typeahead';\nimport ListedMealsSection from './components/mealMenu/ListedMealsSection';\nimport RecipeContentSection from './components/mealMenu/RecipeContentSection';\nimport IngredientSection from './components/mealMenu/IngredientSection';\nimport { Popover, PopoverBody } from 'reactstrap';\n\n\n\n\nclass App extends Component {\n\n    meals = [\n        {\n            id: 1,\n            label: \"Garri\",\n            imageSrc: '../images/Garri.jpg',\n            readTime: \"2 mins read\",\n            cookTime: \"2 mins to prepare\",\n            ingredients: [\"Garri\", \"Water\", \"Sugar\"],\n            new_ingredient:{\n                \"Garri\":{\n                servings:{\n                    quantitiy: 1,\n                    measurements: \"Cup(s)\"\n                }},\n                \"Water\":{\n                servings:{\n                    quantitiy: 1,\n                    measurements: \"Cup(s)\"\n                }},\n                \"Sugar\":{\n                    servings:{\n                        quantitiy: 1,\n                        measurements: \"Spoon(s)\"\n                    }}\n              \n            },\n            quantity:[1,2,1],\n            measurements:[\"Cup(s)\",\"Cup(s)\",\"Spoon(s)\"],\n            instructions: [\"Mix Garri and Sugar in a bowl\", \"Add ice, water and groundnuts as preffered\", \"Enjoy!\"],\n            servings: 1,\n            display: false\n        },\n        {\n            id: 2,\n            label: \"Jollof Rice\",\n            imageSrc: \"../images/Jollof.jpg\",\n            readTime: \"4 mins read\",\n            cookTime: \"45 mins to prepare\",\n            ingredients: [\"Rice- 3 Cups\", \"Tomatoes x 6\", \"Onion x 2\", \"Palm Oil- 2 Cups\"],\n            instructions:[ \"Tomato , Onion Tatashe, Rodo Blended in Blender\",\n            \"Vegetable Oil + Palm Oil, Low Heat in Pan\",\n            \"Add onions to Pan\", \"Add Tomato Paste\", \"Add Powdered Ginger, Garlic and Curry\",\n            \"Add Blended Tomatoes mix (If too thick, add water)\",\"Add seasoning, Maggi (Chicken Flavor), Salt\",\n        \"For Jollof Rice, add Bay Leaves.\"],\n            display: true\n        },\n        {\n            id: 3,\n            label: \"Fried Beans\",\n            imageSrc: \"../images/FriedBeans.jpg\",\n            readTime: \"4 mins read\",\n            cookTime: \"60 mins to prepare\",\n            ingredients: [\"Black Eyed Beans x 1 bag(350mL)\", \"Onions x 2\", \"Palm Oil- 2 Cups\"],\n            instructions: [\"Soak beans in water overnight\",\"The next day, chop 1 onion into thin slices, cut the other one into 4 big chunks then pound/grind the pepper.\",\n        \"Rinse the beans and put in a sizeable pot. I rinse it twice.\",\"Pre-cook the sliced onions with a few drops of water to soften them a bit.\",\n     \"Pre-cook the sliced onions with a few drops of water to soften them a bit.\",\"When the beans is done, add salt, leave to dry up all the water and transfer the beans to another container.\",\n    \"Now, set a dry clean pot on the stove, pour the palm oil and heat it up till the oil melts (if congealed). Note that you should only heat it up, not bleach the oil. You will know it is hot enough when a piece of onion dropped into the oil sizzles.\",\n\"Add the precooked onions and stir for a bit.\", \"Add the ground Habanero pepper and stir till everything is heated up very well, at most 2 minutes.\",\"Add the beans and stir for about 2 minutes. Add salt if necessary.\",\n\"Cover and leave to simmer for about 2 minutes and it's done.\"],\n            display: true\n        },\n        {\n            id: 4,\n            label: \"Roasted Potatoes\",\n            imageSrc: \"../images/roasted_potatoes.jpg\",\n            readTime: \"3 mins read\",\n            cookTime: \"90 mins to prepare\",\n            ingredients: [\"Potatoes x 8\", \"Garlic- 6 cloves\",  \"Thyme\", \"Oregano\", \"Basil\", \"Parmesan Cheese\", \"Oil\", \"Butter\"],\n            instructions: [\"Adjust oven rack to lowest position and heat oven to 450 degrees. \", \"Cut potatoes into quarter chunks\",\n        \"Toss potatoes with oil, salt and pepper chopped garlic, Thyme, Oregano, Basil and then Parmesan Cheese\", \n    \"Arrange, cut side down, on a large lipped cookie sheet or jellyroll pan.\", \"Roast until tender and golden brown, or until desired crispiness about 30-45 minutes\",\"Add butter in between roasting for a savory taste, Transfer to a serving dish when ready.\"],\n            display: true\n        }\n    ]\n    constructor(props){\n        super(props);\n        this.suggestMealToggle = this.suggestMealToggle.bind(this);\n\n        this.state={\n            suggestMealPopOver: false,\n            mealsListed : false,\n            mealSelected : false,\n            IngredientsListed : false,\n            recipes: this.meals, //[this.Garri, this.Jollof_Rice],\n            selectedMealIngredients: this.meals[0].new_ingredients,\n            selectedMeal: this.meals[0],\n            showFakeIngredients:{\n                hidden: false\n            },\n            showIngredients:{\n                hidden: true\n            },\n            showFakeProducts:{\n                hidden: false\n            },\n            showProducts:{\n                hidden: true\n            }\n        }\n    }\n\n\n    \n\n    showIngredients=(event)=>{\n        let mealString = event.target.innerText;\n        var meal;\n        for (meal in this.meals){\n            //console.log(this.meals[meal].label);\n            if (this.meals[meal].label === mealString){\n            //change selected ingredients\n                this.setState({selectedMealIngredients: this.meals[meal].ingredients});\n                this.setState({selectedMeal: this.meals[meal]});\n                break;\n            }\n        }\n        //console.log({meal}.name);\n        //get list of ingredients\n    }\n\n    suggestMealToggle() {\n        this.setState({\n            suggestMealPopOver: !this.state.suggestMealPopOver\n        });\n    }\n\n    render() {\n        // Render your page inside\n        // the layout provider\n        return (\n            <div className=\"container\">\n                <Typeahead options={this.meals} \n                placeholder=\"Find Meals (and Ingredients) here..\"\n                // onChange={(selected) => {\n                //     // Handle selections...\n                //   }}\n                // filterBy={['label', 'ingredients']}\n                />\n                <br></br>\n                <div className=\"row\">\n                    <div className=\"col-sm\">\n                        <b>Meals</b>\n                        <ListedMealsSection \n                        recipes={this.state.recipes} showIngredients={this.showIngredients}\n                        selectedMeal={this.state.selectedMeal}/>\n                        <span>&#43;</span><input placeholder=\"Suggest Meal\"></input> \n                        \n                      &nbsp;<button>Submit <span id=\"Popover1\" onMouseOver={this.suggestMealToggle} onMouseOut={this.suggestMealToggle} >\n                      <img src=\"/images/info_icon.png\" alt=\"info\" style={{width:'13px', height:'13px'}}/> </span></button>\n                      {/* onClick={this.suggestMealToggle} */}\n                     </div>                     \n                    <div className=\"col-sm\">\n                        <b>Recipe Content</b>\n                        <RecipeContentSection selectedMeal= {this.state.selectedMeal}/>\n                        \n                    </div>\n\n                    <div className=\"col-sm\">\n                        <b>Ingredients</b>\n                        <IngredientSection selectedMealIngredients= {this.state.selectedMealIngredients}\n                        selectedMeal= {this.state.selectedMeal}/>\n                        {/* <span>&#43;</span><input placeholder=\"Suggest Ingredient..\"></input> */}\n                    </div>\n                    \n                    <Popover placement=\"auto\" isOpen={this.state.suggestMealPopOver} target=\"Popover1\" toggle={this.suggestMealToggle}>\n                        <PopoverBody><div className=\"payback-disclaimer\">\n                        Suggestions by Guest Users are recorded, but do not change the publicly displayed Meals.\n                        </div></PopoverBody>\n                    </Popover>\n                </div>\n            </div>\n            \n        );\n    }\n} \n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}